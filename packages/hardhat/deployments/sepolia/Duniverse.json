{
  "address": "0x8750753695D7F994eF159Cc52B49f0930374D4CE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_MOCKUSDT_ADDRESS",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        }
      ],
      "name": "AppealRaised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "ApprovalDeclined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "ApprovalGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "ApprovalRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "Delivered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "planetName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "planetDescription",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ruler",
          "type": "address"
        }
      ],
      "name": "PlanetCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ProductAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "Release",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "Sale",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MOCKUSDT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_productName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_planetId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "addProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "appeals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvalRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "approveSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedSellers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_planetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_planetName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_planetDescription",
          "type": "string"
        }
      ],
      "name": "createPlanet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "declineSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getBuyerPurchases",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "purchaseId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isReleased",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isDelivered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRefunded",
              "type": "bool"
            }
          ],
          "internalType": "struct Duniverse.Purchase[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getPurchases",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "purchaseId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isReleased",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isDelivered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRefunded",
              "type": "bool"
            }
          ],
          "internalType": "struct Duniverse.Purchase[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getSellerPurchases",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "purchaseId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isReleased",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isDelivered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRefunded",
              "type": "bool"
            }
          ],
          "internalType": "struct Duniverse.Purchase[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        }
      ],
      "name": "markDelivered",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProducts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPurchases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "planets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "planetName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "planetDescription",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "ruler",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "string",
          "name": "productName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sales",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "purchaseProduct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "purchases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isReleased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isDelivered",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRefunded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        }
      ],
      "name": "raiseAppeal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        }
      ],
      "name": "releaseFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_planetId",
          "type": "uint256"
        }
      ],
      "name": "requestApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x07657262f7d4db335a3b153962810e6266a4ae9b55277ac566334357e5eddd51",
  "receipt": {
    "to": null,
    "from": "0x612Dfa9fF8d6D19eff48A78D2827aC5a8F138596",
    "contractAddress": "0x8750753695D7F994eF159Cc52B49f0930374D4CE",
    "transactionIndex": 105,
    "gasUsed": "2288660",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x09499990373e099463a0ee82d390537b170c9f85c04af4b638702efbf6e24fe7",
    "transactionHash": "0x07657262f7d4db335a3b153962810e6266a4ae9b55277ac566334357e5eddd51",
    "logs": [],
    "blockNumber": 6597561,
    "cumulativeGasUsed": "18782033",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe8fB78FD7C76A3e2f500d4302E8a75E6706804f8"
  ],
  "numDeployments": 1,
  "solcInputHash": "a1230b72b9e268bc2d0cf73856869cca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MOCKUSDT_ADDRESS\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"AppealRaised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"ApprovalDeclined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"ApprovalGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"ApprovalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Delivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"planetName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"planetDescription\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ruler\",\"type\":\"address\"}],\"name\":\"PlanetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ProductAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MOCKUSDT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_productName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_planetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"appeals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"approveSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedSellers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_planetName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_planetDescription\",\"type\":\"string\"}],\"name\":\"createPlanet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"declineSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getBuyerPurchases\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelivered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"internalType\":\"struct Duniverse.Purchase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getPurchases\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelivered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"internalType\":\"struct Duniverse.Purchase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getSellerPurchases\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelivered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"internalType\":\"struct Duniverse.Purchase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"}],\"name\":\"markDelivered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProducts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"planets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"planetName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"planetDescription\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ruler\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"productName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sales\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"purchaseProduct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelivered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"}],\"name\":\"raiseAppeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"}],\"name\":\"releaseFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planetId\",\"type\":\"uint256\"}],\"name\":\"requestApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Duniverse.sol\":\"Duniverse\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0xd2dd6003a2dc02ab905fd405938322e510429d19ae6c07c2c683d70f13ab2f36\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Duniverse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./mockUSDT.sol\\\";\\n\\ncontract Duniverse {\\n    address public owner;  // The owner of the contract\\n    address public MOCKUSDT_ADDRESS;\\n\\n    mapping(uint256 => Purchase) public purchases;\\n    mapping(uint256 => Product) public products;\\n    mapping(uint256 => Planet) public planets;\\n    mapping(address => uint) public approvedSellers;\\n    mapping(address => uint256) public approvalRequests;\\n    mapping(uint256 => bool) public appeals; // New mapping for appeals\\n\\n    uint256 public numPurchases;\\n    uint256 public numProducts;\\n\\n    struct Planet {\\n        uint256 planetId;\\n        string planetName;\\n        string planetDescription;\\n        address ruler;\\n    }\\n\\n    struct Purchase {\\n        uint256 purchaseId;\\n        uint256 productId;\\n        address buyer;\\n        address seller;\\n        uint256 amount;\\n        bool isReleased;\\n        bool isDelivered;\\n        bool isRefunded;\\n    }\\n\\n    struct Product {\\n        string productName;\\n        uint256 productId;\\n        uint256 planetId;\\n        address seller;\\n        uint256 quantity;\\n        uint256 price;\\n        uint256 sales;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only the Owner can perform this operation\\\");\\n        _;\\n    }\\n\\n    modifier onlyApprovedSeller(uint256 planetId) {\\n        require(approvedSellers[msg.sender] == planetId, \\\"Only approved sellers can add products\\\");\\n        _;\\n    }\\n\\n    modifier onlyBuyer(uint256 purchaseId) {\\n        require(msg.sender == purchases[purchaseId].buyer, \\\"Only the Buyer can perform this operation\\\");\\n        _;\\n    }\\n\\n    modifier onlySeller(uint256 purchaseId) {\\n        require(msg.sender == purchases[purchaseId].seller, \\\"Only the Seller can perform this operation\\\");\\n        _;\\n    }\\n\\n    modifier onlyPurchaseRuler(uint256 purchaseId) {\\n        Purchase memory purchase = purchases[purchaseId];\\n        uint productId = purchase.productId;\\n        uint planetId = products[productId].planetId;\\n        Planet memory planet = planets[planetId];\\n        require(msg.sender == planet.ruler, \\\"Only the Ruler can perform this operation\\\");\\n        _;\\n    }\\n\\n    modifier onlyRuler(uint planetId) {\\n        require(msg.sender == planets[planetId].ruler, \\\"Only the Ruler can perform this operation\\\");\\n        _ ;\\n    }\\n\\n    event Sale(\\n        address indexed buyer,\\n        uint256 purchaseId,\\n        uint256 totalAmount\\n    );\\n\\n    event Refund(\\n        address indexed buyer,\\n        address indexed seller,\\n        uint256 purchaseId,\\n        uint256 totalAmount\\n    );\\n\\n    event Release(\\n        address indexed buyer,\\n        uint256 purchaseId,\\n        uint256 totalAmount\\n    );\\n\\n    event Delivered(\\n        address indexed buyer,\\n        uint256 purchaseId,\\n        uint256 totalAmount\\n    );\\n\\n    event ApprovalRequested(\\n        address indexed seller,\\n        uint256 planetId\\n    );\\n\\n    event ApprovalGranted(\\n        address indexed seller,\\n        uint256 planetId\\n    );\\n\\n    event ApprovalDeclined(\\n        address indexed seller,\\n        uint256 planetId\\n    );\\n\\n    event AppealRaised(\\n        uint256 indexed purchaseId,\\n        address indexed by\\n    );\\n\\n    event PlanetCreated(\\n        uint256 indexed planetId,\\n        string planetName,\\n        string planetDescription,\\n        address indexed ruler\\n    );\\n\\n    event ProductAdded(\\n        uint256 indexed productId,\\n        uint256 indexed planetId,\\n        address indexed seller,\\n        string name,\\n        uint256 quantity,\\n        uint256 price\\n    );\\n\\n    constructor(address _MOCKUSDT_ADDRESS) {\\n        owner = msg.sender;\\n        MOCKUSDT_ADDRESS = _MOCKUSDT_ADDRESS;\\n    }\\n\\n    // Function to add a product\\n    function addProduct(string memory _productName, uint256 _planetId, address _seller, uint256 _quantity, uint256 _price) public onlyApprovedSeller(_planetId) {\\n        uint256 _productId = ++numProducts;\\n        products[_productId] = Product(_productName, _productId, _planetId, _seller, _quantity, _price, 0);\\n        emit ProductAdded(_productId, _planetId, _seller,_productName, _quantity, _price); // Emit event when a product is added\\n    }\\n\\n    // Function for sellers to request approval\\n    function requestApproval(uint256 _planetId) public {\\n        approvalRequests[msg.sender] = _planetId;\\n        emit ApprovalRequested(msg.sender, _planetId);\\n    }\\n\\n    // Function for rulers to approve a seller\\n    function approveSeller(address _seller) public onlyRuler(approvalRequests[_seller]) {\\n        uint256 planetId = approvalRequests[_seller];\\n        approvedSellers[_seller] = planetId;\\n        delete approvalRequests[_seller];\\n        emit ApprovalGranted(_seller, planetId);\\n    }\\n\\n    // Function for rulers to decline a seller\\n    function declineSeller(address _seller) public onlyPurchaseRuler(approvalRequests[_seller]) {\\n        uint256 planetId = approvalRequests[_seller];\\n        delete approvalRequests[_seller];\\n        emit ApprovalDeclined(_seller, planetId);\\n    }\\n\\n    function createPlanet(uint256 _planetId, string memory _planetName, string memory _planetDescription) public {\\n        planets[_planetId] = Planet(_planetId, _planetName, _planetDescription, msg.sender);\\n        emit PlanetCreated(_planetId, _planetName, _planetDescription, msg.sender); // Emit event when a planet is created\\n    }\\n\\n    function getPurchases(uint start, uint end) public view returns (Purchase[] memory) {\\n        require(start <= end, \\\"Invalid range\\\");\\n        uint length = end - start + 1;\\n        Purchase[] memory _purchases = new Purchase[](length);\\n        uint j = 0;\\n        for (uint i = start; i <= end; i++) {\\n            _purchases[j] = purchases[i];\\n            j++;\\n        }\\n        return _purchases;\\n    }\\n\\n    function getBuyerPurchases(address buyer, uint start, uint end) public view returns (Purchase[] memory) {\\n        require(start <= end, \\\"Invalid range\\\");\\n        uint length = end - start + 1;\\n        Purchase[] memory _purchases = new Purchase[](length);\\n        uint j = 0;\\n        for (uint i = start; i <= end; i++) {\\n            if (purchases[i].buyer == buyer) {\\n                _purchases[j] = purchases[i];\\n                j++;\\n            }\\n        }\\n        return _purchases;\\n    }\\n\\n    function getSellerPurchases(address seller, uint start, uint end) public view returns (Purchase[] memory) {\\n        require(start <= end, \\\"Invalid range\\\");\\n        uint length = end - start + 1;\\n        Purchase[] memory _purchases = new Purchase[](length);\\n        uint j = 0;\\n        for (uint i = start; i <= end; i++) {\\n            if (purchases[i].seller == seller) {\\n                _purchases[j] = purchases[i];\\n                j++;\\n            }\\n        }\\n        return _purchases;\\n    }\\n\\n    function purchaseProduct(uint256 _productId, uint256 _quantity) public payable {\\n        require(products[_productId].quantity >= _quantity, \\\"Insufficient inventory or product does not exist\\\");\\n        uint256 totalPrice = products[_productId].price * _quantity;\\n        MockUSDT(MOCKUSDT_ADDRESS).transferFrom(msg.sender, address(this), totalPrice);\\n        numPurchases++;\\n        emit Sale(msg.sender, numPurchases, totalPrice);\\n        products[_productId].quantity -= _quantity;\\n        products[_productId].sales += _quantity;\\n        purchases[numPurchases] = Purchase(numPurchases, _productId, msg.sender, products[_productId].seller, totalPrice, false, false, false);\\n        emit Sale(msg.sender, numPurchases, _quantity);\\n    }\\n\\n    // Function to issue a refund\\n    function release(uint256 _purchaseId) external onlyBuyer(_purchaseId) {\\n        require(!purchases[_purchaseId].isReleased, \\\"Funds are already released\\\");\\n        MockUSDT(MOCKUSDT_ADDRESS).transfer(purchases[_purchaseId].seller, purchases[_purchaseId].amount);\\n        purchases[_purchaseId].isReleased = true;\\n        emit Release(msg.sender, _purchaseId, purchases[_purchaseId].amount);\\n    }\\n\\n    function releaseFor(uint256 _purchaseId) external onlyPurchaseRuler(_purchaseId) {\\n        require(appeals[_purchaseId], \\\"Appeal must be raised before release\\\");\\n        require(!purchases[_purchaseId].isReleased, \\\"Funds are already released\\\");\\n        MockUSDT(MOCKUSDT_ADDRESS).transfer(purchases[_purchaseId].seller, purchases[_purchaseId].amount);\\n        purchases[_purchaseId].isReleased = true;\\n        emit Release(msg.sender, _purchaseId, purchases[_purchaseId].amount);\\n    }\\n\\n    function refund(uint256 _purchaseId) external onlyPurchaseRuler(_purchaseId) {\\n        require(appeals[_purchaseId], \\\"Appeal must be raised before refund\\\");\\n        require(!purchases[_purchaseId].isReleased, \\\"Funds are already released\\\");\\n        require(!purchases[_purchaseId].isRefunded, \\\"Purchase already refunded\\\");\\n        MockUSDT(MOCKUSDT_ADDRESS).transfer(purchases[_purchaseId].buyer, purchases[_purchaseId].amount);\\n        emit Refund(msg.sender, purchases[_purchaseId].seller, _purchaseId, purchases[_purchaseId].amount);\\n        purchases[_purchaseId].isRefunded = true;\\n    }\\n\\n    function markDelivered(uint256 _purchaseId) external onlySeller(_purchaseId) {\\n        require(!purchases[_purchaseId].isDelivered, \\\"Already shipped\\\");\\n        purchases[_purchaseId].isDelivered = true;\\n        emit Delivered(msg.sender, _purchaseId, purchases[_purchaseId].amount);\\n    }\\n\\n    // Function for buyers and sellers to raise an appeal\\n    function raiseAppeal(uint256 _purchaseId) external {\\n        require(msg.sender == purchases[_purchaseId].buyer || msg.sender == purchases[_purchaseId].seller, \\\"Only buyer or seller can raise an appeal\\\");\\n        appeals[_purchaseId] = true;\\n        emit AppealRaised(_purchaseId, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x98eee7b91f3434d008d7301574829b56ee3694a8d745fdabfaaa229d27e56949\",\"license\":\"MIT\"},\"contracts/mockUSDT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\ncontract MockUSDT is ERC20, Ownable, ERC20Permit {\\n    function decimals() public view virtual override returns (uint8) {\\n        return 6;\\n    }\\n    constructor() ERC20(\\\"mockUSDT\\\", \\\"ECD\\\") ERC20Permit(\\\"MyToken\\\") {\\n        _mint(msg.sender, 1000 * 10 ** decimals());\\n    }\\n\\n\\n    function mint() public {\\n        _mint(msg.sender, 1000 * 10 ** decimals());\\n    }\\n}\",\"keccak256\":\"0xcdf7532afae87b9557658b5a4623c65f2f8ad0e3e05b9b9bb278e1652c10413a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200283e3803806200283e833981016040819052620000349162000068565b60008054336001600160a01b031991821617909155600180549091166001600160a01b03929092169190911790556200009a565b6000602082840312156200007b57600080fd5b81516001600160a01b03811681146200009357600080fd5b9392505050565b61279480620000aa6000396000f3fe60806040526004361061014b5760003560e01c8063802125f5116100b6578063acff86871161006f578063acff86871461048b578063bc323bbe146104cb578063bed55167146104eb578063d1d54c051461050b578063d29079bb1461052b578063eb826a5f1461054b57600080fd5b8063802125f51461031c5780638392fe311461033c5780638da5cb5b146103fd578063931e52ee14610435578063a044042614610462578063ac964f211461047557600080fd5b80634042f8b5116101085780634042f8b51461023c5780634d41cd621461025c5780635ec5d8561461027c5780636d148f841461029c578063738f74e1146102bc5780637acc0b20146102e957600080fd5b8063214bcce01461015057806326c1e75014610186578063278ecde1146101b65780632939359d146101d857806333bc844f146101fc57806337bdc99b1461021c575b600080fd5b34801561015c57600080fd5b5061017061016b3660046120f5565b61056b565b60405161017d9190612128565b60405180910390f35b34801561019257600080fd5b506101a66101a13660046121c9565b610708565b60405161017d9493929190612228565b3480156101c257600080fd5b506101d66101d13660046121c9565b61084a565b005b3480156101e457600080fd5b506101ee60085481565b60405190815260200161017d565b34801561020857600080fd5b506101d661021736600461226d565b610c82565b34801561022857600080fd5b506101d66102373660046121c9565b610f0b565b34801561024857600080fd5b506101d6610257366004612332565b6110b6565b34801561026857600080fd5b506101706102773660046120f5565b61117e565b34801561028857600080fd5b506101d661029736600461226d565b611307565b3480156102a857600080fd5b506101d66102b73660046121c9565b6113bb565b3480156102c857600080fd5b506101ee6102d736600461226d565b60066020526000908152604090205481565b3480156102f557600080fd5b506103096103043660046121c9565b61140a565b60405161017d979695949392919061239f565b34801561032857600080fd5b506101d66103373660046121c9565b6114d9565b34801561034857600080fd5b506103b06103573660046121c9565b60026020819052600091825260409091208054600182015492820154600383015460048401546005909401549294936001600160a01b0392831693929091169160ff808216916101008104821691620100009091041688565b6040805198895260208901979097526001600160a01b03958616968801969096529390921660608601526080850152151560a0840152151560c0830152151560e08201526101000161017d565b34801561040957600080fd5b5060005461041d906001600160a01b031681565b6040516001600160a01b03909116815260200161017d565b34801561044157600080fd5b506101ee61045036600461226d565b60056020526000908152604090205481565b6101d66104703660046123ec565b61188f565b34801561048157600080fd5b506101ee60095481565b34801561049757600080fd5b506104bb6104a63660046121c9565b60076020526000908152604090205460ff1681565b604051901515815260200161017d565b3480156104d757600080fd5b506101d66104e636600461240e565b611b6b565b3480156104f757600080fd5b506101706105063660046123ec565b611d0b565b34801561051757600080fd5b5060015461041d906001600160a01b031681565b34801561053757600080fd5b506101d66105463660046121c9565b611e7c565b34801561055757600080fd5b506101d66105663660046121c9565b611f61565b6060818311156105965760405162461bcd60e51b815260040161058d90612477565b60405180910390fd5b60006105a284846124b4565b6105ad9060016124c7565b905060008167ffffffffffffffff8111156105ca576105ca61228f565b60405190808252806020026020018201604052801561060357816020015b6105f0612095565b8152602001906001900390816105e85790505b5090506000855b8581116106fc576000818152600260205260409020600301546001600160a01b03808a169116036106ea576000818152600260208181526040928390208351610100808201865282548252600183015493820193909352928101546001600160a01b0390811694840194909452600381015490931660608301526004830154608083015260059092015460ff808216151560a08401529281048316151560c0830152620100009004909116151560e082015283518490849081106106d0576106d06124da565b602002602001018190525081806106e6906124f0565b9250505b806106f4816124f0565b91505061060a565b50909695505050505050565b6004602052600090815260409020805460018201805491929161072a90612509565b80601f016020809104026020016040519081016040528092919081815260200182805461075690612509565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b5050505050908060020180546107b890612509565b80601f01602080910402602001604051908101604052809291908181526020018280546107e490612509565b80156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b505050600390930154919250506001600160a01b031684565b60008181526002602081815260408084208151610100808201845282548252600180840154838701819052848801546001600160a01b0390811685880152600380870154909116606086015260048087015460808088019190915260059097015460ff808216151560a08901529581048616151560c0880152620100009004909416151560e0860152818a528752858920909701548089529186528488208551948501909552845484528401805489989397969295939493928401919061091090612509565b80601f016020809104026020016040519081016040528092919081815260200182805461093c90612509565b80156109895780601f1061095e57610100808354040283529160200191610989565b820191906000526020600020905b81548152906001019060200180831161096c57829003601f168201915b505050505081526020016002820180546109a290612509565b80601f01602080910402602001604051908101604052809291908181526020018280546109ce90612509565b8015610a1b5780601f106109f057610100808354040283529160200191610a1b565b820191906000526020600020905b8154815290600101906020018083116109fe57829003601f168201915b5050509183525050600391909101546001600160a01b039081166020909201919091526060820151919250163314610a655760405162461bcd60e51b815260040161058d90612543565b60008681526007602052604090205460ff16610acf5760405162461bcd60e51b815260206004820152602360248201527f41707065616c206d75737420626520726169736564206265666f7265207265666044820152621d5b9960ea1b606482015260840161058d565b60008681526002602052604090206005015460ff1615610b015760405162461bcd60e51b815260040161058d9061258c565b60008681526002602052604090206005015462010000900460ff1615610b695760405162461bcd60e51b815260206004820152601960248201527f507572636861736520616c726561647920726566756e64656400000000000000604482015260640161058d565b60015460008781526002602081905260409182902090810154600491820154925163a9059cbb60e01b81526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af1158015610bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfd91906125c3565b50600086815260026020908152604091829020600381015460049091015483518a8152928301526001600160a01b03169133917f82c4addd7df9bb5b801dcdeb0a67eb8bda3d9e213af78965d584b0be8cb63660910160405180910390a350505060009283525050600260205260409020600501805462ff0000191662010000179055565b6001600160a01b0380821660009081526006602090815260408083205480845260028084528285208351610100808201865282548252600180840154838901819052848601548b1684890152600380860154909b16606085015260048086015460808087019190915260059096015460ff808216151560a08801529481048516151560c0870152620100009004909316151560e0850152808a52998852868920909401548089529087528588208651938401909652855483529285018054949891979196939591949293919291840191610d5b90612509565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8790612509565b8015610dd45780601f10610da957610100808354040283529160200191610dd4565b820191906000526020600020905b815481529060010190602001808311610db757829003601f168201915b50505050508152602001600282018054610ded90612509565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1990612509565b8015610e665780601f10610e3b57610100808354040283529160200191610e66565b820191906000526020600020905b815481529060010190602001808311610e4957829003601f168201915b5050509183525050600391909101546001600160a01b039081166020909201919091526060820151919250163314610eb05760405162461bcd60e51b815260040161058d90612543565b6001600160a01b03861660008181526006602090815260408083208054939055518281529192917f6db674a69e9ad4a55205180b47485cdc0476c8986d824e9699b2e271382d0c46910160405180910390a250505050505050565b6000818152600260208190526040909120015481906001600160a01b03163314610f895760405162461bcd60e51b815260206004820152602960248201527f4f6e6c79207468652042757965722063616e20706572666f726d20746869732060448201526837b832b930ba34b7b760b91b606482015260840161058d565b60008281526002602052604090206005015460ff1615610fbb5760405162461bcd60e51b815260040161058d9061258c565b600154600083815260026020526040908190206003810154600491820154925163a9059cbb60e01b81526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af115801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e91906125c3565b506000828152600260205260409081902060058101805460ff1916600117905560040154905133917f2c57dec1db0095a6b800c2698d5bbceef2c180c6ac43429769a719658983f677916110aa91868252602082015260400190565b60405180910390a25050565b6040805160808101825284815260208082018581528284018590523360608401526000878152600490925292902081518155915190919060018201906110fc9082612634565b50604082015160028201906111119082612634565b5060609190910151600390910180546001600160a01b0319166001600160a01b03909216919091179055604051339084907f8da1d1310292fe3fc539b9bdc9f9707a8c8ab7a87386069342d1a0cd167a4c2c9061117190869086906126f4565b60405180910390a3505050565b6060818311156111a05760405162461bcd60e51b815260040161058d90612477565b60006111ac84846124b4565b6111b79060016124c7565b905060008167ffffffffffffffff8111156111d4576111d461228f565b60405190808252806020026020018201604052801561120d57816020015b6111fa612095565b8152602001906001900390816111f25790505b5090506000855b8581116106fc57600081815260026020819052604090912001546001600160a01b03808a169116036112f5576000818152600260208181526040928390208351610100808201865282548252600183015493820193909352928101546001600160a01b0390811694840194909452600381015490931660608301526004830154608083015260059092015460ff808216151560a08401529281048316151560c0830152620100009004909116151560e082015283518490849081106112db576112db6124da565b602002602001018190525081806112f1906124f0565b9250505b806112ff816124f0565b915050611214565b6001600160a01b0381811660009081526006602090815260408083205480845260049092529091206003015490911633146113545760405162461bcd60e51b815260040161058d90612543565b6001600160a01b03821660008181526006602081815260408084208054600584528286208190559383529390935591518181529092917f8858b15a4f1540b0df00082304b78a2330d9ed2951d395bbccb90c257e298ab491015b60405180910390a2505050565b3360008181526006602052604090819020839055517f476871eccc7ab517c1c23acfd3954e8ed6fe523bbe0b0ab9a9611d3324ec08ee906113ff9084815260200190565b60405180910390a250565b60036020526000908152604090208054819061142590612509565b80601f016020809104026020016040519081016040528092919081815260200182805461145190612509565b801561149e5780601f106114735761010080835404028352916020019161149e565b820191906000526020600020905b81548152906001019060200180831161148157829003601f168201915b50505060018401546002850154600386015460048701546005880154600690980154969793969295506001600160a01b039091169350919087565b60008181526002602081815260408084208151610100808201845282548252600180840154838701819052848801546001600160a01b0390811685880152600380870154909116606086015260048087015460808088019190915260059097015460ff808216151560a08901529581048616151560c0880152620100009004909416151560e0860152818a528752858920909701548089529186528488208551948501909552845484528401805489989397969295939493928401919061159f90612509565b80601f01602080910402602001604051908101604052809291908181526020018280546115cb90612509565b80156116185780601f106115ed57610100808354040283529160200191611618565b820191906000526020600020905b8154815290600101906020018083116115fb57829003601f168201915b5050505050815260200160028201805461163190612509565b80601f016020809104026020016040519081016040528092919081815260200182805461165d90612509565b80156116aa5780601f1061167f576101008083540402835291602001916116aa565b820191906000526020600020905b81548152906001019060200180831161168d57829003601f168201915b5050509183525050600391909101546001600160a01b0390811660209092019190915260608201519192501633146116f45760405162461bcd60e51b815260040161058d90612543565b60008681526007602052604090205460ff1661175e5760405162461bcd60e51b8152602060048201526024808201527f41707065616c206d75737420626520726169736564206265666f72652072656c6044820152636561736560e01b606482015260840161058d565b60008681526002602052604090206005015460ff16156117905760405162461bcd60e51b815260040161058d9061258c565b600154600087815260026020526040908190206003810154600491820154925163a9059cbb60e01b81526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af11580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182391906125c3565b506000868152600260205260409081902060058101805460ff1916600117905560040154905133917f2c57dec1db0095a6b800c2698d5bbceef2c180c6ac43429769a719658983f6779161187f918a8252602082015260400190565b60405180910390a2505050505050565b6000828152600360205260409020600401548111156119095760405162461bcd60e51b815260206004820152603060248201527f496e73756666696369656e7420696e76656e746f7279206f722070726f64756360448201526f1d08191bd95cc81b9bdd08195e1a5cdd60821b606482015260840161058d565b600082815260036020526040812060050154611926908390612722565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af115801561197e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a291906125c3565b50600880549060006119b3836124f0565b9091555050600854604080519182526020820183905233917f0f4a9c70987615d71a1085cae3c6fb0c2855f81a5ec62cb7ee3136d5407e357c910160405180910390a260008381526003602052604081206004018054849290611a179084906124b4565b909155505060008381526003602052604081206006018054849290611a3d9084906124c7565b90915550506040805161010080820183526008805480845260208085018981523386880181815260008c815260038086528a82208101546001600160a01b0390811660608c0190815260808c018e815260a08d0185815260c08e0186815260e08f018781529b875260029a8b9052958f90209d518e55975160018e01559451978c0180549883166001600160a01b0319998a1617905551918b018054929091169190961617909455516004880155905160059096018054925193511515620100000262ff00001994151590960261ff00199715159790971661ffff199093169290921795909517919091169290921790915554915190917f0f4a9c70987615d71a1085cae3c6fb0c2855f81a5ec62cb7ee3136d5407e357c916113ae91908690918252602082015260400190565b3360009081526005602052604090205484908114611bda5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920617070726f7665642073656c6c6572732063616e206164642070726044820152656f647563747360d01b606482015260840161058d565b6000600960008154611beb906124f0565b91905081905590506040518060e00160405280888152602001828152602001878152602001866001600160a01b031681526020018581526020018481526020016000815250600360008381526020019081526020016000206000820151816000019081611c589190612634565b50602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a0820151816005015560c08201518160060155905050846001600160a01b031686827f4b42422c0df50ead31d3e5c29926db929c56a78c814a337ff12ddc76440b3a5a8a8888604051611cfa93929190612739565b60405180910390a450505050505050565b606081831115611d2d5760405162461bcd60e51b815260040161058d90612477565b6000611d3984846124b4565b611d449060016124c7565b905060008167ffffffffffffffff811115611d6157611d6161228f565b604051908082528060200260200182016040528015611d9a57816020015b611d87612095565b815260200190600190039081611d7f5790505b5090506000855b858111611e6f576000818152600260208181526040928390208351610100808201865282548252600183015493820193909352928101546001600160a01b0390811694840194909452600381015490931660608301526004830154608083015260059092015460ff808216151560a08401529281048316151560c0830152620100009004909116151560e08201528351849084908110611e4357611e436124da565b60200260200101819052508180611e59906124f0565b9250508080611e67906124f0565b915050611da1565b5090925050505b92915050565b600081815260026020819052604090912001546001600160a01b0316331480611ebe57506000818152600260205260409020600301546001600160a01b031633145b611f1b5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206275796572206f722073656c6c65722063616e20726169736520616044820152671b88185c1c19585b60c21b606482015260840161058d565b600081815260076020526040808220805460ff1916600117905551339183917f84fe926178a9a001285f5126878cb13cc2d8c091b23b313f76a0875d230b627c9190a350565b60008181526002602052604090206003015481906001600160a01b03163314611fdf5760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79207468652053656c6c65722063616e20706572666f726d20746869736044820152691037b832b930ba34b7b760b11b606482015260840161058d565b600082815260026020526040902060050154610100900460ff16156120385760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481cda1a5c1c1959608a1b604482015260640161058d565b6000828152600260205260409081902060058101805461ff00191661010017905560040154905133917f47357acf7cd02d7a69ba4d681fead1ba8015768d36e56cdd2340d1cc0a148d64916110aa91868252602082015260400190565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b80356001600160a01b03811681146120f057600080fd5b919050565b60008060006060848603121561210a57600080fd5b612113846120d9565b95602085013595506040909401359392505050565b602080825282518282018190526000919060409081850190868401855b828110156121bc578151805185528681015187860152858101516001600160a01b0390811687870152606080830151909116908601526080808201519086015260a08082015115159086015260c08082015115159086015260e0908101511515908501526101009093019290850190600101612145565b5091979650505050505050565b6000602082840312156121db57600080fd5b5035919050565b6000815180845260005b81811015612208576020818501810151868301820152016121ec565b506000602082860101526020601f19601f83011685010191505092915050565b84815260806020820152600061224160808301866121e2565b828103604084015261225381866121e2565b91505060018060a01b038316606083015295945050505050565b60006020828403121561227f57600080fd5b612288826120d9565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126122b657600080fd5b813567ffffffffffffffff808211156122d1576122d161228f565b604051601f8301601f19908116603f011681019082821181831017156122f9576122f961228f565b8160405283815286602085880101111561231257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561234757600080fd5b83359250602084013567ffffffffffffffff8082111561236657600080fd5b612372878388016122a5565b9350604086013591508082111561238857600080fd5b50612395868287016122a5565b9150509250925092565b60e0815260006123b260e083018a6121e2565b60208301989098525060408101959095526001600160a01b03939093166060850152608084019190915260a083015260c090910152919050565b600080604083850312156123ff57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561242657600080fd5b853567ffffffffffffffff81111561243d57600080fd5b612449888289016122a5565b9550506020860135935061245f604087016120d9565b94979396509394606081013594506080013592915050565b6020808252600d908201526c496e76616c69642072616e676560981b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115611e7657611e7661249e565b80820180821115611e7657611e7661249e565b634e487b7160e01b600052603260045260246000fd5b6000600182016125025761250261249e565b5060010190565b600181811c9082168061251d57607f821691505b60208210810361253d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526029908201527f4f6e6c79207468652052756c65722063616e20706572666f726d20746869732060408201526837b832b930ba34b7b760b91b606082015260800190565b6020808252601a908201527f46756e64732061726520616c72656164792072656c6561736564000000000000604082015260600190565b6000602082840312156125d557600080fd5b8151801515811461228857600080fd5b601f82111561262f57600081815260208120601f850160051c8101602086101561260c5750805b601f850160051c820191505b8181101561262b57828155600101612618565b5050505b505050565b815167ffffffffffffffff81111561264e5761264e61228f565b6126628161265c8454612509565b846125e5565b602080601f831160018114612697576000841561267f5750858301515b600019600386901b1c1916600185901b17855561262b565b600085815260208120601f198616915b828110156126c6578886015182559484019460019091019084016126a7565b50858210156126e45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60408152600061270760408301856121e2565b828103602084015261271981856121e2565b95945050505050565b8082028115828204841417611e7657611e7661249e565b60608152600061274c60608301866121e2565b6020830194909452506040015291905056fea2646970667358221220700c92f207dc5008836bbdd03011feb30252299e9d66a298feefc36c201d88b264736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c8063802125f5116100b6578063acff86871161006f578063acff86871461048b578063bc323bbe146104cb578063bed55167146104eb578063d1d54c051461050b578063d29079bb1461052b578063eb826a5f1461054b57600080fd5b8063802125f51461031c5780638392fe311461033c5780638da5cb5b146103fd578063931e52ee14610435578063a044042614610462578063ac964f211461047557600080fd5b80634042f8b5116101085780634042f8b51461023c5780634d41cd621461025c5780635ec5d8561461027c5780636d148f841461029c578063738f74e1146102bc5780637acc0b20146102e957600080fd5b8063214bcce01461015057806326c1e75014610186578063278ecde1146101b65780632939359d146101d857806333bc844f146101fc57806337bdc99b1461021c575b600080fd5b34801561015c57600080fd5b5061017061016b3660046120f5565b61056b565b60405161017d9190612128565b60405180910390f35b34801561019257600080fd5b506101a66101a13660046121c9565b610708565b60405161017d9493929190612228565b3480156101c257600080fd5b506101d66101d13660046121c9565b61084a565b005b3480156101e457600080fd5b506101ee60085481565b60405190815260200161017d565b34801561020857600080fd5b506101d661021736600461226d565b610c82565b34801561022857600080fd5b506101d66102373660046121c9565b610f0b565b34801561024857600080fd5b506101d6610257366004612332565b6110b6565b34801561026857600080fd5b506101706102773660046120f5565b61117e565b34801561028857600080fd5b506101d661029736600461226d565b611307565b3480156102a857600080fd5b506101d66102b73660046121c9565b6113bb565b3480156102c857600080fd5b506101ee6102d736600461226d565b60066020526000908152604090205481565b3480156102f557600080fd5b506103096103043660046121c9565b61140a565b60405161017d979695949392919061239f565b34801561032857600080fd5b506101d66103373660046121c9565b6114d9565b34801561034857600080fd5b506103b06103573660046121c9565b60026020819052600091825260409091208054600182015492820154600383015460048401546005909401549294936001600160a01b0392831693929091169160ff808216916101008104821691620100009091041688565b6040805198895260208901979097526001600160a01b03958616968801969096529390921660608601526080850152151560a0840152151560c0830152151560e08201526101000161017d565b34801561040957600080fd5b5060005461041d906001600160a01b031681565b6040516001600160a01b03909116815260200161017d565b34801561044157600080fd5b506101ee61045036600461226d565b60056020526000908152604090205481565b6101d66104703660046123ec565b61188f565b34801561048157600080fd5b506101ee60095481565b34801561049757600080fd5b506104bb6104a63660046121c9565b60076020526000908152604090205460ff1681565b604051901515815260200161017d565b3480156104d757600080fd5b506101d66104e636600461240e565b611b6b565b3480156104f757600080fd5b506101706105063660046123ec565b611d0b565b34801561051757600080fd5b5060015461041d906001600160a01b031681565b34801561053757600080fd5b506101d66105463660046121c9565b611e7c565b34801561055757600080fd5b506101d66105663660046121c9565b611f61565b6060818311156105965760405162461bcd60e51b815260040161058d90612477565b60405180910390fd5b60006105a284846124b4565b6105ad9060016124c7565b905060008167ffffffffffffffff8111156105ca576105ca61228f565b60405190808252806020026020018201604052801561060357816020015b6105f0612095565b8152602001906001900390816105e85790505b5090506000855b8581116106fc576000818152600260205260409020600301546001600160a01b03808a169116036106ea576000818152600260208181526040928390208351610100808201865282548252600183015493820193909352928101546001600160a01b0390811694840194909452600381015490931660608301526004830154608083015260059092015460ff808216151560a08401529281048316151560c0830152620100009004909116151560e082015283518490849081106106d0576106d06124da565b602002602001018190525081806106e6906124f0565b9250505b806106f4816124f0565b91505061060a565b50909695505050505050565b6004602052600090815260409020805460018201805491929161072a90612509565b80601f016020809104026020016040519081016040528092919081815260200182805461075690612509565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b5050505050908060020180546107b890612509565b80601f01602080910402602001604051908101604052809291908181526020018280546107e490612509565b80156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b505050600390930154919250506001600160a01b031684565b60008181526002602081815260408084208151610100808201845282548252600180840154838701819052848801546001600160a01b0390811685880152600380870154909116606086015260048087015460808088019190915260059097015460ff808216151560a08901529581048616151560c0880152620100009004909416151560e0860152818a528752858920909701548089529186528488208551948501909552845484528401805489989397969295939493928401919061091090612509565b80601f016020809104026020016040519081016040528092919081815260200182805461093c90612509565b80156109895780601f1061095e57610100808354040283529160200191610989565b820191906000526020600020905b81548152906001019060200180831161096c57829003601f168201915b505050505081526020016002820180546109a290612509565b80601f01602080910402602001604051908101604052809291908181526020018280546109ce90612509565b8015610a1b5780601f106109f057610100808354040283529160200191610a1b565b820191906000526020600020905b8154815290600101906020018083116109fe57829003601f168201915b5050509183525050600391909101546001600160a01b039081166020909201919091526060820151919250163314610a655760405162461bcd60e51b815260040161058d90612543565b60008681526007602052604090205460ff16610acf5760405162461bcd60e51b815260206004820152602360248201527f41707065616c206d75737420626520726169736564206265666f7265207265666044820152621d5b9960ea1b606482015260840161058d565b60008681526002602052604090206005015460ff1615610b015760405162461bcd60e51b815260040161058d9061258c565b60008681526002602052604090206005015462010000900460ff1615610b695760405162461bcd60e51b815260206004820152601960248201527f507572636861736520616c726561647920726566756e64656400000000000000604482015260640161058d565b60015460008781526002602081905260409182902090810154600491820154925163a9059cbb60e01b81526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af1158015610bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfd91906125c3565b50600086815260026020908152604091829020600381015460049091015483518a8152928301526001600160a01b03169133917f82c4addd7df9bb5b801dcdeb0a67eb8bda3d9e213af78965d584b0be8cb63660910160405180910390a350505060009283525050600260205260409020600501805462ff0000191662010000179055565b6001600160a01b0380821660009081526006602090815260408083205480845260028084528285208351610100808201865282548252600180840154838901819052848601548b1684890152600380860154909b16606085015260048086015460808087019190915260059096015460ff808216151560a08801529481048516151560c0870152620100009004909316151560e0850152808a52998852868920909401548089529087528588208651938401909652855483529285018054949891979196939591949293919291840191610d5b90612509565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8790612509565b8015610dd45780601f10610da957610100808354040283529160200191610dd4565b820191906000526020600020905b815481529060010190602001808311610db757829003601f168201915b50505050508152602001600282018054610ded90612509565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1990612509565b8015610e665780601f10610e3b57610100808354040283529160200191610e66565b820191906000526020600020905b815481529060010190602001808311610e4957829003601f168201915b5050509183525050600391909101546001600160a01b039081166020909201919091526060820151919250163314610eb05760405162461bcd60e51b815260040161058d90612543565b6001600160a01b03861660008181526006602090815260408083208054939055518281529192917f6db674a69e9ad4a55205180b47485cdc0476c8986d824e9699b2e271382d0c46910160405180910390a250505050505050565b6000818152600260208190526040909120015481906001600160a01b03163314610f895760405162461bcd60e51b815260206004820152602960248201527f4f6e6c79207468652042757965722063616e20706572666f726d20746869732060448201526837b832b930ba34b7b760b91b606482015260840161058d565b60008281526002602052604090206005015460ff1615610fbb5760405162461bcd60e51b815260040161058d9061258c565b600154600083815260026020526040908190206003810154600491820154925163a9059cbb60e01b81526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af115801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e91906125c3565b506000828152600260205260409081902060058101805460ff1916600117905560040154905133917f2c57dec1db0095a6b800c2698d5bbceef2c180c6ac43429769a719658983f677916110aa91868252602082015260400190565b60405180910390a25050565b6040805160808101825284815260208082018581528284018590523360608401526000878152600490925292902081518155915190919060018201906110fc9082612634565b50604082015160028201906111119082612634565b5060609190910151600390910180546001600160a01b0319166001600160a01b03909216919091179055604051339084907f8da1d1310292fe3fc539b9bdc9f9707a8c8ab7a87386069342d1a0cd167a4c2c9061117190869086906126f4565b60405180910390a3505050565b6060818311156111a05760405162461bcd60e51b815260040161058d90612477565b60006111ac84846124b4565b6111b79060016124c7565b905060008167ffffffffffffffff8111156111d4576111d461228f565b60405190808252806020026020018201604052801561120d57816020015b6111fa612095565b8152602001906001900390816111f25790505b5090506000855b8581116106fc57600081815260026020819052604090912001546001600160a01b03808a169116036112f5576000818152600260208181526040928390208351610100808201865282548252600183015493820193909352928101546001600160a01b0390811694840194909452600381015490931660608301526004830154608083015260059092015460ff808216151560a08401529281048316151560c0830152620100009004909116151560e082015283518490849081106112db576112db6124da565b602002602001018190525081806112f1906124f0565b9250505b806112ff816124f0565b915050611214565b6001600160a01b0381811660009081526006602090815260408083205480845260049092529091206003015490911633146113545760405162461bcd60e51b815260040161058d90612543565b6001600160a01b03821660008181526006602081815260408084208054600584528286208190559383529390935591518181529092917f8858b15a4f1540b0df00082304b78a2330d9ed2951d395bbccb90c257e298ab491015b60405180910390a2505050565b3360008181526006602052604090819020839055517f476871eccc7ab517c1c23acfd3954e8ed6fe523bbe0b0ab9a9611d3324ec08ee906113ff9084815260200190565b60405180910390a250565b60036020526000908152604090208054819061142590612509565b80601f016020809104026020016040519081016040528092919081815260200182805461145190612509565b801561149e5780601f106114735761010080835404028352916020019161149e565b820191906000526020600020905b81548152906001019060200180831161148157829003601f168201915b50505060018401546002850154600386015460048701546005880154600690980154969793969295506001600160a01b039091169350919087565b60008181526002602081815260408084208151610100808201845282548252600180840154838701819052848801546001600160a01b0390811685880152600380870154909116606086015260048087015460808088019190915260059097015460ff808216151560a08901529581048616151560c0880152620100009004909416151560e0860152818a528752858920909701548089529186528488208551948501909552845484528401805489989397969295939493928401919061159f90612509565b80601f01602080910402602001604051908101604052809291908181526020018280546115cb90612509565b80156116185780601f106115ed57610100808354040283529160200191611618565b820191906000526020600020905b8154815290600101906020018083116115fb57829003601f168201915b5050505050815260200160028201805461163190612509565b80601f016020809104026020016040519081016040528092919081815260200182805461165d90612509565b80156116aa5780601f1061167f576101008083540402835291602001916116aa565b820191906000526020600020905b81548152906001019060200180831161168d57829003601f168201915b5050509183525050600391909101546001600160a01b0390811660209092019190915260608201519192501633146116f45760405162461bcd60e51b815260040161058d90612543565b60008681526007602052604090205460ff1661175e5760405162461bcd60e51b8152602060048201526024808201527f41707065616c206d75737420626520726169736564206265666f72652072656c6044820152636561736560e01b606482015260840161058d565b60008681526002602052604090206005015460ff16156117905760405162461bcd60e51b815260040161058d9061258c565b600154600087815260026020526040908190206003810154600491820154925163a9059cbb60e01b81526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af11580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182391906125c3565b506000868152600260205260409081902060058101805460ff1916600117905560040154905133917f2c57dec1db0095a6b800c2698d5bbceef2c180c6ac43429769a719658983f6779161187f918a8252602082015260400190565b60405180910390a2505050505050565b6000828152600360205260409020600401548111156119095760405162461bcd60e51b815260206004820152603060248201527f496e73756666696369656e7420696e76656e746f7279206f722070726f64756360448201526f1d08191bd95cc81b9bdd08195e1a5cdd60821b606482015260840161058d565b600082815260036020526040812060050154611926908390612722565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af115801561197e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a291906125c3565b50600880549060006119b3836124f0565b9091555050600854604080519182526020820183905233917f0f4a9c70987615d71a1085cae3c6fb0c2855f81a5ec62cb7ee3136d5407e357c910160405180910390a260008381526003602052604081206004018054849290611a179084906124b4565b909155505060008381526003602052604081206006018054849290611a3d9084906124c7565b90915550506040805161010080820183526008805480845260208085018981523386880181815260008c815260038086528a82208101546001600160a01b0390811660608c0190815260808c018e815260a08d0185815260c08e0186815260e08f018781529b875260029a8b9052958f90209d518e55975160018e01559451978c0180549883166001600160a01b0319998a1617905551918b018054929091169190961617909455516004880155905160059096018054925193511515620100000262ff00001994151590960261ff00199715159790971661ffff199093169290921795909517919091169290921790915554915190917f0f4a9c70987615d71a1085cae3c6fb0c2855f81a5ec62cb7ee3136d5407e357c916113ae91908690918252602082015260400190565b3360009081526005602052604090205484908114611bda5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920617070726f7665642073656c6c6572732063616e206164642070726044820152656f647563747360d01b606482015260840161058d565b6000600960008154611beb906124f0565b91905081905590506040518060e00160405280888152602001828152602001878152602001866001600160a01b031681526020018581526020018481526020016000815250600360008381526020019081526020016000206000820151816000019081611c589190612634565b50602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a0820151816005015560c08201518160060155905050846001600160a01b031686827f4b42422c0df50ead31d3e5c29926db929c56a78c814a337ff12ddc76440b3a5a8a8888604051611cfa93929190612739565b60405180910390a450505050505050565b606081831115611d2d5760405162461bcd60e51b815260040161058d90612477565b6000611d3984846124b4565b611d449060016124c7565b905060008167ffffffffffffffff811115611d6157611d6161228f565b604051908082528060200260200182016040528015611d9a57816020015b611d87612095565b815260200190600190039081611d7f5790505b5090506000855b858111611e6f576000818152600260208181526040928390208351610100808201865282548252600183015493820193909352928101546001600160a01b0390811694840194909452600381015490931660608301526004830154608083015260059092015460ff808216151560a08401529281048316151560c0830152620100009004909116151560e08201528351849084908110611e4357611e436124da565b60200260200101819052508180611e59906124f0565b9250508080611e67906124f0565b915050611da1565b5090925050505b92915050565b600081815260026020819052604090912001546001600160a01b0316331480611ebe57506000818152600260205260409020600301546001600160a01b031633145b611f1b5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206275796572206f722073656c6c65722063616e20726169736520616044820152671b88185c1c19585b60c21b606482015260840161058d565b600081815260076020526040808220805460ff1916600117905551339183917f84fe926178a9a001285f5126878cb13cc2d8c091b23b313f76a0875d230b627c9190a350565b60008181526002602052604090206003015481906001600160a01b03163314611fdf5760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79207468652053656c6c65722063616e20706572666f726d20746869736044820152691037b832b930ba34b7b760b11b606482015260840161058d565b600082815260026020526040902060050154610100900460ff16156120385760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481cda1a5c1c1959608a1b604482015260640161058d565b6000828152600260205260409081902060058101805461ff00191661010017905560040154905133917f47357acf7cd02d7a69ba4d681fead1ba8015768d36e56cdd2340d1cc0a148d64916110aa91868252602082015260400190565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b80356001600160a01b03811681146120f057600080fd5b919050565b60008060006060848603121561210a57600080fd5b612113846120d9565b95602085013595506040909401359392505050565b602080825282518282018190526000919060409081850190868401855b828110156121bc578151805185528681015187860152858101516001600160a01b0390811687870152606080830151909116908601526080808201519086015260a08082015115159086015260c08082015115159086015260e0908101511515908501526101009093019290850190600101612145565b5091979650505050505050565b6000602082840312156121db57600080fd5b5035919050565b6000815180845260005b81811015612208576020818501810151868301820152016121ec565b506000602082860101526020601f19601f83011685010191505092915050565b84815260806020820152600061224160808301866121e2565b828103604084015261225381866121e2565b91505060018060a01b038316606083015295945050505050565b60006020828403121561227f57600080fd5b612288826120d9565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126122b657600080fd5b813567ffffffffffffffff808211156122d1576122d161228f565b604051601f8301601f19908116603f011681019082821181831017156122f9576122f961228f565b8160405283815286602085880101111561231257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561234757600080fd5b83359250602084013567ffffffffffffffff8082111561236657600080fd5b612372878388016122a5565b9350604086013591508082111561238857600080fd5b50612395868287016122a5565b9150509250925092565b60e0815260006123b260e083018a6121e2565b60208301989098525060408101959095526001600160a01b03939093166060850152608084019190915260a083015260c090910152919050565b600080604083850312156123ff57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561242657600080fd5b853567ffffffffffffffff81111561243d57600080fd5b612449888289016122a5565b9550506020860135935061245f604087016120d9565b94979396509394606081013594506080013592915050565b6020808252600d908201526c496e76616c69642072616e676560981b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115611e7657611e7661249e565b80820180821115611e7657611e7661249e565b634e487b7160e01b600052603260045260246000fd5b6000600182016125025761250261249e565b5060010190565b600181811c9082168061251d57607f821691505b60208210810361253d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526029908201527f4f6e6c79207468652052756c65722063616e20706572666f726d20746869732060408201526837b832b930ba34b7b760b91b606082015260800190565b6020808252601a908201527f46756e64732061726520616c72656164792072656c6561736564000000000000604082015260600190565b6000602082840312156125d557600080fd5b8151801515811461228857600080fd5b601f82111561262f57600081815260208120601f850160051c8101602086101561260c5750805b601f850160051c820191505b8181101561262b57828155600101612618565b5050505b505050565b815167ffffffffffffffff81111561264e5761264e61228f565b6126628161265c8454612509565b846125e5565b602080601f831160018114612697576000841561267f5750858301515b600019600386901b1c1916600185901b17855561262b565b600085815260208120601f198616915b828110156126c6578886015182559484019460019091019084016126a7565b50858210156126e45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60408152600061270760408301856121e2565b828103602084015261271981856121e2565b95945050505050565b8082028115828204841417611e7657611e7661249e565b60608152600061274c60608301866121e2565b6020830194909452506040015291905056fea2646970667358221220700c92f207dc5008836bbdd03011feb30252299e9d66a298feefc36c201d88b264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2667,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2669,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "MOCKUSDT_ADDRESS",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2674,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "purchases",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Purchase)2726_storage)"
      },
      {
        "astId": 2679,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "products",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Product)2741_storage)"
      },
      {
        "astId": 2684,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "planets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Planet)2709_storage)"
      },
      {
        "astId": 2688,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "approvedSellers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2692,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "approvalRequests",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2696,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "appeals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2698,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "numPurchases",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2700,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "numProducts",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Planet)2709_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Duniverse.Planet)",
        "numberOfBytes": "32",
        "value": "t_struct(Planet)2709_storage"
      },
      "t_mapping(t_uint256,t_struct(Product)2741_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Duniverse.Product)",
        "numberOfBytes": "32",
        "value": "t_struct(Product)2741_storage"
      },
      "t_mapping(t_uint256,t_struct(Purchase)2726_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Duniverse.Purchase)",
        "numberOfBytes": "32",
        "value": "t_struct(Purchase)2726_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Planet)2709_storage": {
        "encoding": "inplace",
        "label": "struct Duniverse.Planet",
        "members": [
          {
            "astId": 2702,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "planetId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2704,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "planetName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2706,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "planetDescription",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2708,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "ruler",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Product)2741_storage": {
        "encoding": "inplace",
        "label": "struct Duniverse.Product",
        "members": [
          {
            "astId": 2728,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "productName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2730,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "productId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2732,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "planetId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2734,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "seller",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2736,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "quantity",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2738,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2740,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "sales",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Purchase)2726_storage": {
        "encoding": "inplace",
        "label": "struct Duniverse.Purchase",
        "members": [
          {
            "astId": 2711,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "purchaseId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2713,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "productId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2715,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "buyer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2717,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "seller",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2719,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "amount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2721,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "isReleased",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 2723,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "isDelivered",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 2725,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "isRefunded",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}