{
  "address": "0x83bd7e53dE6ba627f3f01fA6A8C5d665E0A860DC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_MOCKUSDT_ADDRESS",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        }
      ],
      "name": "AppealRaised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "ApprovalDeclined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "ApprovalGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "ApprovalRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "Delivered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "planetName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "planetImage",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "planetDescription",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ruler",
          "type": "address"
        }
      ],
      "name": "PlanetCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "productImage",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ProductAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "Release",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "Sale",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MOCKUSDT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_productName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_planetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_productImage",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "addProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "appeals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvalRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "approveSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedSellers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_planetName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_planetImage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_planetDescription",
          "type": "string"
        }
      ],
      "name": "createPlanet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "declineSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getBuyerPurchases",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "purchaseId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isReleased",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isDelivered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRefunded",
              "type": "bool"
            }
          ],
          "internalType": "struct Duniverse.Purchase[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getPurchases",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "purchaseId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isReleased",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isDelivered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRefunded",
              "type": "bool"
            }
          ],
          "internalType": "struct Duniverse.Purchase[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getSellerPurchases",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "purchaseId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isReleased",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isDelivered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRefunded",
              "type": "bool"
            }
          ],
          "internalType": "struct Duniverse.Purchase[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        }
      ],
      "name": "markDelivered",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPlanets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProducts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPurchases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "planets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "planetName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "planetDescription",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "ruler",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "string",
          "name": "productName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sales",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "purchaseProduct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "purchases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isReleased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isDelivered",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRefunded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        }
      ],
      "name": "raiseAppeal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        }
      ],
      "name": "releaseFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_planetId",
          "type": "uint256"
        }
      ],
      "name": "requestApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rulerPlanets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "planetName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "planetDescription",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "ruler",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x168b4c757a7f060e6203f123951c536a5cd8a9cbc4360d910d667aaeb876264e",
  "receipt": {
    "to": null,
    "from": "0x612Dfa9fF8d6D19eff48A78D2827aC5a8F138596",
    "contractAddress": "0x83bd7e53dE6ba627f3f01fA6A8C5d665E0A860DC",
    "transactionIndex": 52,
    "gasUsed": "2430803",
    "logsBloom": "0x
    "blockHash": "0x7d751fee12980e19b1e987f464abdab96d45a63d1d92f0405481192de778451e",
    "transactionHash": "0x168b4c757a7f060e6203f123951c536a5cd8a9cbc4360d910d667aaeb876264e",
    "logs": [],
    "blockNumber": 6601118,
    "cumulativeGasUsed": "13865361",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0DaeDC95e655667E9ff86998C0E0651FC3530067"
  ],
  "numDeployments": 4,
  "solcInputHash": "ef1144cf1c70dbb50b0322e6335df431",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MOCKUSDT_ADDRESS\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"AppealRaised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"ApprovalDeclined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"ApprovalGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"ApprovalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Delivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"planetName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"planetImage\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"planetDescription\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ruler\",\"type\":\"address\"}],\"name\":\"PlanetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"productImage\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ProductAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MOCKUSDT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_productName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_planetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_productImage\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"appeals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"approveSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedSellers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_planetName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_planetImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_planetDescription\",\"type\":\"string\"}],\"name\":\"createPlanet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"declineSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getBuyerPurchases\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelivered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"internalType\":\"struct Duniverse.Purchase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getPurchases\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelivered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"internalType\":\"struct Duniverse.Purchase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getSellerPurchases\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelivered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"internalType\":\"struct Duniverse.Purchase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"}],\"name\":\"markDelivered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPlanets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProducts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"planets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"planetName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"planetDescription\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ruler\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"productName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sales\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"purchaseProduct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelivered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"}],\"name\":\"raiseAppeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"}],\"name\":\"releaseFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planetId\",\"type\":\"uint256\"}],\"name\":\"requestApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rulerPlanets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"planetName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"planetDescription\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ruler\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Duniverse.sol\":\"Duniverse\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Duniverse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./mockUSDT.sol\\\";\\n\\ncontract Duniverse {\\n    address public owner;  // The owner of the contract\\n    address public MOCKUSDT_ADDRESS;\\n\\n    mapping(uint256 => Purchase) public purchases;\\n    mapping(uint256 => Product) public products;\\n    mapping(uint256 => Planet) public planets;\\n    mapping(address => uint) public approvedSellers;\\n    mapping(address => uint256) public approvalRequests;\\n    mapping(uint256 => bool) public appeals; // New mapping for appeals\\n    mapping(address => Planet) public rulerPlanets;\\n\\n    uint256 public numPurchases;\\n    uint256 public numProducts;\\n    uint256 public numPlanets;\\n\\n    struct Planet {\\n        uint256 planetId;\\n        string planetName;\\n        string planetDescription;\\n        address ruler;\\n    }\\n\\n    struct Purchase {\\n        uint256 purchaseId;\\n        uint256 productId;\\n        address buyer;\\n        address seller;\\n        uint256 amount;\\n        bool isReleased;\\n        bool isDelivered;\\n        bool isRefunded;\\n    }\\n\\n    struct Product {\\n        string productName;\\n        uint256 productId;\\n        uint256 planetId;\\n        address seller;\\n        uint256 quantity;\\n        uint256 price;\\n        uint256 sales;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only the Owner can perform this operation\\\");\\n        _;\\n    }\\n\\n    modifier onlyApprovedSeller(uint256 planetId) {\\n        require(approvedSellers[msg.sender] == planetId, \\\"Only approved sellers can add products\\\");\\n        _;\\n    }\\n\\n    modifier onlyBuyer(uint256 purchaseId) {\\n        require(msg.sender == purchases[purchaseId].buyer, \\\"Only the Buyer can perform this operation\\\");\\n        _;\\n    }\\n\\n    modifier onlySeller(uint256 purchaseId) {\\n        require(msg.sender == purchases[purchaseId].seller, \\\"Only the Seller can perform this operation\\\");\\n        _;\\n    }\\n\\n    modifier onlyPurchaseRuler(uint256 purchaseId) {\\n        Purchase memory purchase = purchases[purchaseId];\\n        uint productId = purchase.productId;\\n        uint planetId = products[productId].planetId;\\n        Planet memory planet = planets[planetId];\\n        require(msg.sender == planet.ruler, \\\"Only the Ruler can perform this operation\\\");\\n        _;\\n    }\\n\\n    modifier onlyRuler(uint planetId) {\\n        require(msg.sender == planets[planetId].ruler, \\\"Only the Ruler can perform this operation\\\");\\n        _ ;\\n    }\\n\\n    event Sale(\\n        address indexed buyer,\\n        uint256 purchaseId,\\n        uint256 totalAmount\\n    );\\n\\n    event Refund(\\n        address indexed buyer,\\n        address indexed seller,\\n        uint256 purchaseId,\\n        uint256 totalAmount\\n    );\\n\\n    event Release(\\n        address indexed buyer,\\n        uint256 purchaseId,\\n        uint256 totalAmount\\n    );\\n\\n    event Delivered(\\n        address indexed buyer,\\n        uint256 purchaseId,\\n        uint256 totalAmount\\n    );\\n\\n    event ApprovalRequested(\\n        address indexed seller,\\n        uint256 planetId\\n    );\\n\\n    event ApprovalGranted(\\n        address indexed seller,\\n        uint256 planetId\\n    );\\n\\n    event ApprovalDeclined(\\n        address indexed seller,\\n        uint256 planetId\\n    );\\n\\n    event AppealRaised(\\n        uint256 indexed purchaseId,\\n        address indexed by\\n    );\\n\\n    event PlanetCreated(\\n        uint256 indexed planetId,\\n        string planetName,\\n        string planetImage,\\n        string planetDescription,\\n        address indexed ruler\\n    );\\n\\n    event ProductAdded(\\n        uint256 indexed productId,\\n        uint256 indexed planetId,\\n        address indexed seller,\\n        string productImage,\\n        string name,\\n        uint256 quantity,\\n        uint256 price\\n    );\\n\\n    constructor(address _MOCKUSDT_ADDRESS) {\\n        owner = msg.sender;\\n        MOCKUSDT_ADDRESS = _MOCKUSDT_ADDRESS;\\n    }\\n\\n    // Function to add a product\\n    function addProduct(string memory _productName, uint256 _planetId, string memory _productImage, address _seller, uint256 _quantity, uint256 _price) public onlyApprovedSeller(_planetId) {\\n        uint256 _productId = ++numProducts;       // Check if the seller is the ruler of the planet\\n        require(_seller != planets[_planetId].ruler, \\\"Rulers cannot create products on their own planet\\\");\\n        products[_productId] = Product(_productName, _productId, _planetId, _seller, _quantity, _price, 0);\\n        emit ProductAdded(_productId, _planetId, _seller, _productImage, _productName, _quantity, _price); // Emit event when a product is added\\n    }\\n\\n    // Function for sellers to request approval\\n    function requestApproval(uint256 _planetId) public {\\n        approvalRequests[msg.sender] = _planetId;\\n        emit ApprovalRequested(msg.sender, _planetId);\\n    }\\n\\n    // Function for rulers to approve a seller\\n    function approveSeller(address _seller) public onlyRuler(approvalRequests[_seller]) {\\n        uint256 planetId = approvalRequests[_seller];\\n        approvedSellers[_seller] = planetId;\\n        delete approvalRequests[_seller];\\n        emit ApprovalGranted(_seller, planetId);\\n    }\\n\\n    // Function for rulers to decline a seller\\n    function declineSeller(address _seller) public onlyPurchaseRuler(approvalRequests[_seller]) {\\n        uint256 planetId = approvalRequests[_seller];\\n        delete approvalRequests[_seller];\\n        emit ApprovalDeclined(_seller, planetId);\\n    }\\n\\n    function createPlanet(string memory _planetName, string memory _planetImage, string memory _planetDescription) public {\\n        require(rulerPlanets[msg.sender].planetId == 0, \\\"Only one planet is allowed per ruler\\\");\\n        uint256 _planetId = ++numPlanets;\\n        planets[_planetId] = Planet(_planetId, _planetName, _planetDescription, msg.sender);\\n        emit PlanetCreated(_planetId, _planetName, _planetImage, _planetDescription, msg.sender); // Emit event when a planet is created\\n    }\\n\\n    function getPurchases(uint start, uint end) public view returns (Purchase[] memory) {\\n        require(start <= end, \\\"Invalid range\\\");\\n        uint length = end - start + 1;\\n        Purchase[] memory _purchases = new Purchase[](length);\\n        uint j = 0;\\n        for (uint i = start; i <= end; i++) {\\n            _purchases[j] = purchases[i];\\n            j++;\\n        }\\n        return _purchases;\\n    }\\n\\n    function getBuyerPurchases(address buyer, uint start, uint end) public view returns (Purchase[] memory) {\\n        require(start <= end, \\\"Invalid range\\\");\\n        uint length = end - start + 1;\\n        Purchase[] memory _purchases = new Purchase[](length);\\n        uint j = 0;\\n        for (uint i = start; i <= end; i++) {\\n            if (purchases[i].buyer == buyer) {\\n                _purchases[j] = purchases[i];\\n                j++;\\n            }\\n        }\\n        return _purchases;\\n    }\\n\\n    function getSellerPurchases(address seller, uint start, uint end) public view returns (Purchase[] memory) {\\n        require(start <= end, \\\"Invalid range\\\");\\n        uint length = end - start + 1;\\n        Purchase[] memory _purchases = new Purchase[](length);\\n        uint j = 0;\\n        for (uint i = start; i <= end; i++) {\\n            if (purchases[i].seller == seller) {\\n                _purchases[j] = purchases[i];\\n                j++;\\n            }\\n        }\\n        return _purchases;\\n    }\\n\\n  function purchaseProduct(uint256 _productId, uint256 _quantity) public payable {\\n    require(products[_productId].quantity >= _quantity, \\\"Insufficient inventory or product does not exist\\\");\\n    \\n    // Get the planetId associated with the product\\n    uint256 planetId = products[_productId].planetId;\\n    \\n    // Check if the buyer is the ruler of the planet\\n    require(msg.sender != planets[planetId].ruler, \\\"Rulers cannot buy from their own planet\\\");\\n\\n    uint256 totalPrice = products[_productId].price * _quantity;\\n    MockUSDT(MOCKUSDT_ADDRESS).transferFrom(msg.sender, address(this), totalPrice);\\n    numPurchases++;\\n    emit Sale(msg.sender, numPurchases, totalPrice);\\n    products[_productId].quantity -= _quantity;\\n    products[_productId].sales += _quantity;\\n    purchases[numPurchases] = Purchase(numPurchases, _productId, msg.sender, products[_productId].seller, totalPrice, false, false, false);\\n    emit Sale(msg.sender, numPurchases, _quantity);\\n}\\n\\n    // Function to issue a refund\\n    function release(uint256 _purchaseId) external onlyBuyer(_purchaseId) {\\n        require(!purchases[_purchaseId].isReleased, \\\"Funds are already released\\\");\\n        MockUSDT(MOCKUSDT_ADDRESS).transfer(purchases[_purchaseId].seller, purchases[_purchaseId].amount);\\n        purchases[_purchaseId].isReleased = true;\\n        emit Release(msg.sender, _purchaseId, purchases[_purchaseId].amount);\\n    }\\n\\n    function releaseFor(uint256 _purchaseId) external onlyPurchaseRuler(_purchaseId) {\\n        require(appeals[_purchaseId], \\\"Appeal must be raised before release\\\");\\n        require(!purchases[_purchaseId].isReleased, \\\"Funds are already released\\\");\\n        MockUSDT(MOCKUSDT_ADDRESS).transfer(purchases[_purchaseId].seller, purchases[_purchaseId].amount);\\n        purchases[_purchaseId].isReleased = true;\\n        emit Release(msg.sender, _purchaseId, purchases[_purchaseId].amount);\\n    }\\n\\n    function refund(uint256 _purchaseId) external onlyPurchaseRuler(_purchaseId) {\\n        require(appeals[_purchaseId], \\\"Appeal must be raised before refund\\\");\\n        require(!purchases[_purchaseId].isReleased, \\\"Funds are already released\\\");\\n        require(!purchases[_purchaseId].isRefunded, \\\"Purchase already refunded\\\");\\n        MockUSDT(MOCKUSDT_ADDRESS).transfer(purchases[_purchaseId].buyer, purchases[_purchaseId].amount);\\n        emit Refund(msg.sender, purchases[_purchaseId].seller, _purchaseId, purchases[_purchaseId].amount);\\n        purchases[_purchaseId].isRefunded = true;\\n    }\\n\\n    function markDelivered(uint256 _purchaseId) external onlySeller(_purchaseId) {\\n        require(!purchases[_purchaseId].isDelivered, \\\"Already shipped\\\");\\n        purchases[_purchaseId].isDelivered = true;\\n        emit Delivered(msg.sender, _purchaseId, purchases[_purchaseId].amount);\\n    }\\n\\n    // Function for buyers and sellers to raise an appeal\\n    function raiseAppeal(uint256 _purchaseId) external {\\n        require(msg.sender == purchases[_purchaseId].buyer || msg.sender == purchases[_purchaseId].seller, \\\"Only buyer or seller can raise an appeal\\\");\\n        appeals[_purchaseId] = true;\\n        emit AppealRaised(_purchaseId, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xb66bca7dd52e43c92d941117cd2ab1e659e2af3d5a4ea4a6d2b1afe7288c249a\",\"license\":\"MIT\"},\"contracts/mockUSDT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MockUSDT is ERC20, Ownable {\\n    function decimals() public view virtual override returns (uint8) {\\n        return 6;\\n    }\\n    constructor() ERC20(\\\"mockUSDT\\\", \\\"MUSDT\\\")  {\\n        _mint(msg.sender, 1000 * 10 ** decimals());\\n    }\\n\\n\\n    function mint() public {\\n        _mint(msg.sender, 1000 * 10 ** decimals());\\n    }\\n}\",\"keccak256\":\"0xd91236e3ffbd322a80c50bb4d2892d279cb60f4bd733be7a0b4105281dc60a3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002ad038038062002ad0833981016040819052620000349162000068565b60008054336001600160a01b031991821617909155600180549091166001600160a01b03929092169190911790556200009a565b6000602082840312156200007b57600080fd5b81516001600160a01b03811681146200009357600080fd5b9392505050565b612a2680620000aa6000396000f3fe6080604052600436106101815760003560e01c806376b00e43116100d1578063a04404261161008a578063bed5516711610064578063bed5516714610557578063d1d54c0514610577578063d29079bb14610597578063eb826a5f146105b757600080fd5b8063a0440426146104ee578063ac964f2114610501578063acff86871461051757600080fd5b806376b00e431461035f5780637acc0b2014610375578063802125f5146103a85780638392fe31146103c85780638da5cb5b14610489578063931e52ee146104c157600080fd5b806337bdc99b1161013e5780635ec5d856116101185780635ec5d856146102d25780636d148f84146102f2578063703cd97f14610312578063738f74e11461033257600080fd5b806337bdc99b146102725780633d9808b4146102925780634d41cd62146102b257600080fd5b806320b7bbb514610186578063214bcce0146101bf57806326c1e750146101ec578063278ecde11461020c5780632939359d1461022e57806333bc844f14610252575b600080fd5b34801561019257600080fd5b506101a66101a136600461231c565b6105d7565b6040516101b69493929190612384565b60405180910390f35b3480156101cb57600080fd5b506101df6101da3660046123c9565b610719565b6040516101b691906123fc565b3480156101f857600080fd5b506101a661020736600461249d565b6108b6565b34801561021857600080fd5b5061022c61022736600461249d565b6108d8565b005b34801561023a57600080fd5b5061024460095481565b6040519081526020016101b6565b34801561025e57600080fd5b5061022c61026d36600461231c565b610d10565b34801561027e57600080fd5b5061022c61028d36600461249d565b610f99565b34801561029e57600080fd5b5061022c6102ad366004612559565b611144565b3480156102be57600080fd5b506101df6102cd3660046123c9565b61128f565b3480156102de57600080fd5b5061022c6102ed36600461231c565b611418565b3480156102fe57600080fd5b5061022c61030d36600461249d565b6114cb565b34801561031e57600080fd5b5061022c61032d3660046125e1565b61151a565b34801561033e57600080fd5b5061024461034d36600461231c565b60066020526000908152604090205481565b34801561036b57600080fd5b50610244600b5481565b34801561038157600080fd5b5061039561039036600461249d565b61173a565b6040516101b69796959493929190612671565b3480156103b457600080fd5b5061022c6103c336600461249d565b611809565b3480156103d457600080fd5b5061043c6103e336600461249d565b60026020819052600091825260409091208054600182015492820154600383015460048401546005909401549294936001600160a01b0392831693929091169160ff808216916101008104821691620100009091041688565b6040805198895260208901979097526001600160a01b03958616968801969096529390921660608601526080850152151560a0840152151560c0830152151560e0820152610100016101b6565b34801561049557600080fd5b506000546104a9906001600160a01b031681565b6040516001600160a01b0390911681526020016101b6565b3480156104cd57600080fd5b506102446104dc36600461231c565b60056020526000908152604090205481565b61022c6104fc3660046126be565b611bbf565b34801561050d57600080fd5b50610244600a5481565b34801561052357600080fd5b5061054761053236600461249d565b60076020526000908152604090205460ff1681565b60405190151581526020016101b6565b34801561056357600080fd5b506101df6105723660046126be565b611f32565b34801561058357600080fd5b506001546104a9906001600160a01b031681565b3480156105a357600080fd5b5061022c6105b236600461249d565b6120a3565b3480156105c357600080fd5b5061022c6105d236600461249d565b612188565b600860205260009081526040902080546001820180549192916105f9906126e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610625906126e0565b80156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b505050505090806002018054610687906126e0565b80601f01602080910402602001604051908101604052809291908181526020018280546106b3906126e0565b80156107005780601f106106d557610100808354040283529160200191610700565b820191906000526020600020905b8154815290600101906020018083116106e357829003601f168201915b505050600390930154919250506001600160a01b031684565b6060818311156107445760405162461bcd60e51b815260040161073b9061271a565b60405180910390fd5b60006107508484612757565b61075b90600161276a565b905060008167ffffffffffffffff811115610778576107786124b6565b6040519080825280602002602001820160405280156107b157816020015b61079e6122bc565b8152602001906001900390816107965790505b5090506000855b8581116108aa576000818152600260205260409020600301546001600160a01b03808a16911603610898576000818152600260208181526040928390208351610100808201865282548252600183015493820193909352928101546001600160a01b0390811694840194909452600381015490931660608301526004830154608083015260059092015460ff808216151560a08401529281048316151560c0830152620100009004909116151560e0820152835184908490811061087e5761087e61277d565b6020026020010181905250818061089490612793565b9250505b806108a281612793565b9150506107b8565b50909695505050505050565b600460205260009081526040902080546001820180549192916105f9906126e0565b60008181526002602081815260408084208151610100808201845282548252600180840154838701819052848801546001600160a01b0390811685880152600380870154909116606086015260048087015460808088019190915260059097015460ff808216151560a08901529581048616151560c0880152620100009004909416151560e0860152818a528752858920909701548089529186528488208551948501909552845484528401805489989397969295939493928401919061099e906126e0565b80601f01602080910402602001604051908101604052809291908181526020018280546109ca906126e0565b8015610a175780601f106109ec57610100808354040283529160200191610a17565b820191906000526020600020905b8154815290600101906020018083116109fa57829003601f168201915b50505050508152602001600282018054610a30906126e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5c906126e0565b8015610aa95780601f10610a7e57610100808354040283529160200191610aa9565b820191906000526020600020905b815481529060010190602001808311610a8c57829003601f168201915b5050509183525050600391909101546001600160a01b039081166020909201919091526060820151919250163314610af35760405162461bcd60e51b815260040161073b906127ac565b60008681526007602052604090205460ff16610b5d5760405162461bcd60e51b815260206004820152602360248201527f41707065616c206d75737420626520726169736564206265666f7265207265666044820152621d5b9960ea1b606482015260840161073b565b60008681526002602052604090206005015460ff1615610b8f5760405162461bcd60e51b815260040161073b906127f5565b60008681526002602052604090206005015462010000900460ff1615610bf75760405162461bcd60e51b815260206004820152601960248201527f507572636861736520616c726561647920726566756e64656400000000000000604482015260640161073b565b60015460008781526002602081905260409182902090810154600491820154925163a9059cbb60e01b81526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af1158015610c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8b919061282c565b50600086815260026020908152604091829020600381015460049091015483518a8152928301526001600160a01b03169133917f82c4addd7df9bb5b801dcdeb0a67eb8bda3d9e213af78965d584b0be8cb63660910160405180910390a350505060009283525050600260205260409020600501805462ff0000191662010000179055565b6001600160a01b0380821660009081526006602090815260408083205480845260028084528285208351610100808201865282548252600180840154838901819052848601548b1684890152600380860154909b16606085015260048086015460808087019190915260059096015460ff808216151560a08801529481048516151560c0870152620100009004909316151560e0850152808a52998852868920909401548089529087528588208651938401909652855483529285018054949891979196939591949293919291840191610de9906126e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610e15906126e0565b8015610e625780601f10610e3757610100808354040283529160200191610e62565b820191906000526020600020905b815481529060010190602001808311610e4557829003601f168201915b50505050508152602001600282018054610e7b906126e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea7906126e0565b8015610ef45780601f10610ec957610100808354040283529160200191610ef4565b820191906000526020600020905b815481529060010190602001808311610ed757829003601f168201915b5050509183525050600391909101546001600160a01b039081166020909201919091526060820151919250163314610f3e5760405162461bcd60e51b815260040161073b906127ac565b6001600160a01b03861660008181526006602090815260408083208054939055518281529192917f6db674a69e9ad4a55205180b47485cdc0476c8986d824e9699b2e271382d0c46910160405180910390a250505050505050565b6000818152600260208190526040909120015481906001600160a01b031633146110175760405162461bcd60e51b815260206004820152602960248201527f4f6e6c79207468652042757965722063616e20706572666f726d20746869732060448201526837b832b930ba34b7b760b91b606482015260840161073b565b60008281526002602052604090206005015460ff16156110495760405162461bcd60e51b815260040161073b906127f5565b600154600083815260026020526040908190206003810154600491820154925163a9059cbb60e01b81526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af11580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc919061282c565b506000828152600260205260409081902060058101805460ff1916600117905560040154905133917f2c57dec1db0095a6b800c2698d5bbceef2c180c6ac43429769a719658983f6779161113891868252602082015260400190565b60405180910390a25050565b33600090815260086020526040902054156111ad5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e6520706c616e657420697320616c6c6f7765642070657220726044820152633ab632b960e11b606482015260840161073b565b6000600b600081546111be90612793565b91829055506040805160808101825282815260208082018881528284018790523360608401526000858152600490925292902081518155915192935091600182019061120a908261289d565b506040820151600282019061121f908261289d565b5060609190910151600390910180546001600160a01b0319166001600160a01b03909216919091179055604051339082907fb8efb51f5b4bd967f9a653b1c5be0eac142c1a82ba0c9c11b0b55a0542255f90906112819088908890889061295d565b60405180910390a350505050565b6060818311156112b15760405162461bcd60e51b815260040161073b9061271a565b60006112bd8484612757565b6112c890600161276a565b905060008167ffffffffffffffff8111156112e5576112e56124b6565b60405190808252806020026020018201604052801561131e57816020015b61130b6122bc565b8152602001906001900390816113035790505b5090506000855b8581116108aa57600081815260026020819052604090912001546001600160a01b03808a16911603611406576000818152600260208181526040928390208351610100808201865282548252600183015493820193909352928101546001600160a01b0390811694840194909452600381015490931660608301526004830154608083015260059092015460ff808216151560a08401529281048316151560c0830152620100009004909116151560e082015283518490849081106113ec576113ec61277d565b6020026020010181905250818061140290612793565b9250505b8061141081612793565b915050611325565b6001600160a01b0381811660009081526006602090815260408083205480845260049092529091206003015490911633146114655760405162461bcd60e51b815260040161073b906127ac565b6001600160a01b03821660008181526006602081815260408084208054600584528286208190559383529390935591518181529092917f8858b15a4f1540b0df00082304b78a2330d9ed2951d395bbccb90c257e298ab4910160405180910390a2505050565b3360008181526006602052604090819020839055517f476871eccc7ab517c1c23acfd3954e8ed6fe523bbe0b0ab9a9611d3324ec08ee9061150f9084815260200190565b60405180910390a250565b33600090815260056020526040902054859081146115895760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920617070726f7665642073656c6c6572732063616e206164642070726044820152656f647563747360d01b606482015260840161073b565b6000600a6000815461159a90612793565b91829055506000888152600460205260409020600301549091506001600160a01b03908116908616036116295760405162461bcd60e51b815260206004820152603160248201527f52756c6572732063616e6e6f74206372656174652070726f6475637473206f6e604482015270081d1a195a5c881bdddb881c1b185b995d607a1b606482015260840161073b565b6040805160e08101825289815260208082018490528183018a90526001600160a01b03881660608301526080820187905260a08201869052600060c0830181905284815260039091529190912081518190611684908261289d565b50602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a0820151816005015560c08201518160060155905050846001600160a01b031687827fcf0ba578d8fa98165d2b7dee4fc33f41671e1c181f06f9e05270d9a563a1812e898c898960405161172894939291906129a0565b60405180910390a45050505050505050565b600360205260009081526040902080548190611755906126e0565b80601f0160208091040260200160405190810160405280929190818152602001828054611781906126e0565b80156117ce5780601f106117a3576101008083540402835291602001916117ce565b820191906000526020600020905b8154815290600101906020018083116117b157829003601f168201915b50505060018401546002850154600386015460048701546005880154600690980154969793969295506001600160a01b039091169350919087565b60008181526002602081815260408084208151610100808201845282548252600180840154838701819052848801546001600160a01b0390811685880152600380870154909116606086015260048087015460808088019190915260059097015460ff808216151560a08901529581048616151560c0880152620100009004909416151560e0860152818a52875285892090970154808952918652848820855194850190955284548452840180548998939796929593949392840191906118cf906126e0565b80601f01602080910402602001604051908101604052809291908181526020018280546118fb906126e0565b80156119485780601f1061191d57610100808354040283529160200191611948565b820191906000526020600020905b81548152906001019060200180831161192b57829003601f168201915b50505050508152602001600282018054611961906126e0565b80601f016020809104026020016040519081016040528092919081815260200182805461198d906126e0565b80156119da5780601f106119af576101008083540402835291602001916119da565b820191906000526020600020905b8154815290600101906020018083116119bd57829003601f168201915b5050509183525050600391909101546001600160a01b039081166020909201919091526060820151919250163314611a245760405162461bcd60e51b815260040161073b906127ac565b60008681526007602052604090205460ff16611a8e5760405162461bcd60e51b8152602060048201526024808201527f41707065616c206d75737420626520726169736564206265666f72652072656c6044820152636561736560e01b606482015260840161073b565b60008681526002602052604090206005015460ff1615611ac05760405162461bcd60e51b815260040161073b906127f5565b600154600087815260026020526040908190206003810154600491820154925163a9059cbb60e01b81526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af1158015611b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b53919061282c565b506000868152600260205260409081902060058101805460ff1916600117905560040154905133917f2c57dec1db0095a6b800c2698d5bbceef2c180c6ac43429769a719658983f67791611baf918a8252602082015260400190565b60405180910390a2505050505050565b600082815260036020526040902060040154811115611c395760405162461bcd60e51b815260206004820152603060248201527f496e73756666696369656e7420696e76656e746f7279206f722070726f64756360448201526f1d08191bd95cc81b9bdd08195e1a5cdd60821b606482015260840161073b565b600082815260036020818152604080842060020154808552600490925290922001546001600160a01b03163303611cc25760405162461bcd60e51b815260206004820152602760248201527f52756c6572732063616e6e6f74206275792066726f6d207468656972206f776e604482015266081c1b185b995d60ca1b606482015260840161073b565b600083815260036020526040812060050154611cdf9084906129d9565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5b919061282c565b5060098054906000611d6c83612793565b9091555050600954604080519182526020820183905233917f0f4a9c70987615d71a1085cae3c6fb0c2855f81a5ec62cb7ee3136d5407e357c910160405180910390a260008481526003602052604081206004018054859290611dd0908490612757565b909155505060008481526003602052604081206006018054859290611df690849061276a565b90915550506040805161010080820183526009805480845260208085018a81523386880181815260008d815260038086528a82208101546001600160a01b0390811660608c0190815260808c018e815260a08d0185815260c08e0186815260e08f018781529b875260029a8b9052958f90209d518e55975160018e01559451978c0180549883166001600160a01b0319998a1617905551918b018054929091169190961617909455516004880155905160059096018054925193511515620100000262ff00001994151590960261ff00199715159790971661ffff199093169290921795909517919091169290921790915554915190917f0f4a9c70987615d71a1085cae3c6fb0c2855f81a5ec62cb7ee3136d5407e357c91611f2491908790918252602082015260400190565b60405180910390a250505050565b606081831115611f545760405162461bcd60e51b815260040161073b9061271a565b6000611f608484612757565b611f6b90600161276a565b905060008167ffffffffffffffff811115611f8857611f886124b6565b604051908082528060200260200182016040528015611fc157816020015b611fae6122bc565b815260200190600190039081611fa65790505b5090506000855b858111612096576000818152600260208181526040928390208351610100808201865282548252600183015493820193909352928101546001600160a01b0390811694840194909452600381015490931660608301526004830154608083015260059092015460ff808216151560a08401529281048316151560c0830152620100009004909116151560e0820152835184908490811061206a5761206a61277d565b6020026020010181905250818061208090612793565b925050808061208e90612793565b915050611fc8565b5090925050505b92915050565b600081815260026020819052604090912001546001600160a01b03163314806120e557506000818152600260205260409020600301546001600160a01b031633145b6121425760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206275796572206f722073656c6c65722063616e20726169736520616044820152671b88185c1c19585b60c21b606482015260840161073b565b600081815260076020526040808220805460ff1916600117905551339183917f84fe926178a9a001285f5126878cb13cc2d8c091b23b313f76a0875d230b627c9190a350565b60008181526002602052604090206003015481906001600160a01b031633146122065760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79207468652053656c6c65722063616e20706572666f726d20746869736044820152691037b832b930ba34b7b760b11b606482015260840161073b565b600082815260026020526040902060050154610100900460ff161561225f5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481cda1a5c1c1959608a1b604482015260640161073b565b6000828152600260205260409081902060058101805461ff00191661010017905560040154905133917f47357acf7cd02d7a69ba4d681fead1ba8015768d36e56cdd2340d1cc0a148d649161113891868252602082015260400190565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b80356001600160a01b038116811461231757600080fd5b919050565b60006020828403121561232e57600080fd5b61233782612300565b9392505050565b6000815180845260005b8181101561236457602081850181015186830182015201612348565b506000602082860101526020601f19601f83011685010191505092915050565b84815260806020820152600061239d608083018661233e565b82810360408401526123af818661233e565b91505060018060a01b038316606083015295945050505050565b6000806000606084860312156123de57600080fd5b6123e784612300565b95602085013595506040909401359392505050565b602080825282518282018190526000919060409081850190868401855b82811015612490578151805185528681015187860152858101516001600160a01b0390811687870152606080830151909116908601526080808201519086015260a08082015115159086015260c08082015115159086015260e0908101511515908501526101009093019290850190600101612419565b5091979650505050505050565b6000602082840312156124af57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126124dd57600080fd5b813567ffffffffffffffff808211156124f8576124f86124b6565b604051601f8301601f19908116603f01168101908282118183101715612520576125206124b6565b8160405283815286602085880101111561253957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561256e57600080fd5b833567ffffffffffffffff8082111561258657600080fd5b612592878388016124cc565b945060208601359150808211156125a857600080fd5b6125b4878388016124cc565b935060408601359150808211156125ca57600080fd5b506125d7868287016124cc565b9150509250925092565b60008060008060008060c087890312156125fa57600080fd5b863567ffffffffffffffff8082111561261257600080fd5b61261e8a838b016124cc565b975060208901359650604089013591508082111561263b57600080fd5b5061264889828a016124cc565b94505061265760608801612300565b92506080870135915060a087013590509295509295509295565b60e08152600061268460e083018a61233e565b60208301989098525060408101959095526001600160a01b03939093166060850152608084019190915260a083015260c090910152919050565b600080604083850312156126d157600080fd5b50508035926020909101359150565b600181811c908216806126f457607f821691505b60208210810361271457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c496e76616c69642072616e676560981b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561209d5761209d612741565b8082018082111561209d5761209d612741565b634e487b7160e01b600052603260045260246000fd5b6000600182016127a5576127a5612741565b5060010190565b60208082526029908201527f4f6e6c79207468652052756c65722063616e20706572666f726d20746869732060408201526837b832b930ba34b7b760b91b606082015260800190565b6020808252601a908201527f46756e64732061726520616c72656164792072656c6561736564000000000000604082015260600190565b60006020828403121561283e57600080fd5b8151801515811461233757600080fd5b601f82111561289857600081815260208120601f850160051c810160208610156128755750805b601f850160051c820191505b8181101561289457828155600101612881565b5050505b505050565b815167ffffffffffffffff8111156128b7576128b76124b6565b6128cb816128c584546126e0565b8461284e565b602080601f83116001811461290057600084156128e85750858301515b600019600386901b1c1916600185901b178555612894565b600085815260208120601f198616915b8281101561292f57888601518255948401946001909101908401612910565b508582101561294d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000612970606083018661233e565b8281036020840152612982818661233e565b90508281036040840152612996818561233e565b9695505050505050565b6080815260006129b3608083018761233e565b82810360208401526129c5818761233e565b604084019590955250506060015292915050565b808202811582820484141761209d5761209d61274156fea264697066735822122078a6fcda90fac10a9602967f3908732e3195e8b58e47d0d20596aa46ef8875a064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c806376b00e43116100d1578063a04404261161008a578063bed5516711610064578063bed5516714610557578063d1d54c0514610577578063d29079bb14610597578063eb826a5f146105b757600080fd5b8063a0440426146104ee578063ac964f2114610501578063acff86871461051757600080fd5b806376b00e431461035f5780637acc0b2014610375578063802125f5146103a85780638392fe31146103c85780638da5cb5b14610489578063931e52ee146104c157600080fd5b806337bdc99b1161013e5780635ec5d856116101185780635ec5d856146102d25780636d148f84146102f2578063703cd97f14610312578063738f74e11461033257600080fd5b806337bdc99b146102725780633d9808b4146102925780634d41cd62146102b257600080fd5b806320b7bbb514610186578063214bcce0146101bf57806326c1e750146101ec578063278ecde11461020c5780632939359d1461022e57806333bc844f14610252575b600080fd5b34801561019257600080fd5b506101a66101a136600461231c565b6105d7565b6040516101b69493929190612384565b60405180910390f35b3480156101cb57600080fd5b506101df6101da3660046123c9565b610719565b6040516101b691906123fc565b3480156101f857600080fd5b506101a661020736600461249d565b6108b6565b34801561021857600080fd5b5061022c61022736600461249d565b6108d8565b005b34801561023a57600080fd5b5061024460095481565b6040519081526020016101b6565b34801561025e57600080fd5b5061022c61026d36600461231c565b610d10565b34801561027e57600080fd5b5061022c61028d36600461249d565b610f99565b34801561029e57600080fd5b5061022c6102ad366004612559565b611144565b3480156102be57600080fd5b506101df6102cd3660046123c9565b61128f565b3480156102de57600080fd5b5061022c6102ed36600461231c565b611418565b3480156102fe57600080fd5b5061022c61030d36600461249d565b6114cb565b34801561031e57600080fd5b5061022c61032d3660046125e1565b61151a565b34801561033e57600080fd5b5061024461034d36600461231c565b60066020526000908152604090205481565b34801561036b57600080fd5b50610244600b5481565b34801561038157600080fd5b5061039561039036600461249d565b61173a565b6040516101b69796959493929190612671565b3480156103b457600080fd5b5061022c6103c336600461249d565b611809565b3480156103d457600080fd5b5061043c6103e336600461249d565b60026020819052600091825260409091208054600182015492820154600383015460048401546005909401549294936001600160a01b0392831693929091169160ff808216916101008104821691620100009091041688565b6040805198895260208901979097526001600160a01b03958616968801969096529390921660608601526080850152151560a0840152151560c0830152151560e0820152610100016101b6565b34801561049557600080fd5b506000546104a9906001600160a01b031681565b6040516001600160a01b0390911681526020016101b6565b3480156104cd57600080fd5b506102446104dc36600461231c565b60056020526000908152604090205481565b61022c6104fc3660046126be565b611bbf565b34801561050d57600080fd5b50610244600a5481565b34801561052357600080fd5b5061054761053236600461249d565b60076020526000908152604090205460ff1681565b60405190151581526020016101b6565b34801561056357600080fd5b506101df6105723660046126be565b611f32565b34801561058357600080fd5b506001546104a9906001600160a01b031681565b3480156105a357600080fd5b5061022c6105b236600461249d565b6120a3565b3480156105c357600080fd5b5061022c6105d236600461249d565b612188565b600860205260009081526040902080546001820180549192916105f9906126e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610625906126e0565b80156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b505050505090806002018054610687906126e0565b80601f01602080910402602001604051908101604052809291908181526020018280546106b3906126e0565b80156107005780601f106106d557610100808354040283529160200191610700565b820191906000526020600020905b8154815290600101906020018083116106e357829003601f168201915b505050600390930154919250506001600160a01b031684565b6060818311156107445760405162461bcd60e51b815260040161073b9061271a565b60405180910390fd5b60006107508484612757565b61075b90600161276a565b905060008167ffffffffffffffff811115610778576107786124b6565b6040519080825280602002602001820160405280156107b157816020015b61079e6122bc565b8152602001906001900390816107965790505b5090506000855b8581116108aa576000818152600260205260409020600301546001600160a01b03808a16911603610898576000818152600260208181526040928390208351610100808201865282548252600183015493820193909352928101546001600160a01b0390811694840194909452600381015490931660608301526004830154608083015260059092015460ff808216151560a08401529281048316151560c0830152620100009004909116151560e0820152835184908490811061087e5761087e61277d565b6020026020010181905250818061089490612793565b9250505b806108a281612793565b9150506107b8565b50909695505050505050565b600460205260009081526040902080546001820180549192916105f9906126e0565b60008181526002602081815260408084208151610100808201845282548252600180840154838701819052848801546001600160a01b0390811685880152600380870154909116606086015260048087015460808088019190915260059097015460ff808216151560a08901529581048616151560c0880152620100009004909416151560e0860152818a528752858920909701548089529186528488208551948501909552845484528401805489989397969295939493928401919061099e906126e0565b80601f01602080910402602001604051908101604052809291908181526020018280546109ca906126e0565b8015610a175780601f106109ec57610100808354040283529160200191610a17565b820191906000526020600020905b8154815290600101906020018083116109fa57829003601f168201915b50505050508152602001600282018054610a30906126e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5c906126e0565b8015610aa95780601f10610a7e57610100808354040283529160200191610aa9565b820191906000526020600020905b815481529060010190602001808311610a8c57829003601f168201915b5050509183525050600391909101546001600160a01b039081166020909201919091526060820151919250163314610af35760405162461bcd60e51b815260040161073b906127ac565b60008681526007602052604090205460ff16610b5d5760405162461bcd60e51b815260206004820152602360248201527f41707065616c206d75737420626520726169736564206265666f7265207265666044820152621d5b9960ea1b606482015260840161073b565b60008681526002602052604090206005015460ff1615610b8f5760405162461bcd60e51b815260040161073b906127f5565b60008681526002602052604090206005015462010000900460ff1615610bf75760405162461bcd60e51b815260206004820152601960248201527f507572636861736520616c726561647920726566756e64656400000000000000604482015260640161073b565b60015460008781526002602081905260409182902090810154600491820154925163a9059cbb60e01b81526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af1158015610c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8b919061282c565b50600086815260026020908152604091829020600381015460049091015483518a8152928301526001600160a01b03169133917f82c4addd7df9bb5b801dcdeb0a67eb8bda3d9e213af78965d584b0be8cb63660910160405180910390a350505060009283525050600260205260409020600501805462ff0000191662010000179055565b6001600160a01b0380821660009081526006602090815260408083205480845260028084528285208351610100808201865282548252600180840154838901819052848601548b1684890152600380860154909b16606085015260048086015460808087019190915260059096015460ff808216151560a08801529481048516151560c0870152620100009004909316151560e0850152808a52998852868920909401548089529087528588208651938401909652855483529285018054949891979196939591949293919291840191610de9906126e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610e15906126e0565b8015610e625780601f10610e3757610100808354040283529160200191610e62565b820191906000526020600020905b815481529060010190602001808311610e4557829003601f168201915b50505050508152602001600282018054610e7b906126e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea7906126e0565b8015610ef45780601f10610ec957610100808354040283529160200191610ef4565b820191906000526020600020905b815481529060010190602001808311610ed757829003601f168201915b5050509183525050600391909101546001600160a01b039081166020909201919091526060820151919250163314610f3e5760405162461bcd60e51b815260040161073b906127ac565b6001600160a01b03861660008181526006602090815260408083208054939055518281529192917f6db674a69e9ad4a55205180b47485cdc0476c8986d824e9699b2e271382d0c46910160405180910390a250505050505050565b6000818152600260208190526040909120015481906001600160a01b031633146110175760405162461bcd60e51b815260206004820152602960248201527f4f6e6c79207468652042757965722063616e20706572666f726d20746869732060448201526837b832b930ba34b7b760b91b606482015260840161073b565b60008281526002602052604090206005015460ff16156110495760405162461bcd60e51b815260040161073b906127f5565b600154600083815260026020526040908190206003810154600491820154925163a9059cbb60e01b81526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af11580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc919061282c565b506000828152600260205260409081902060058101805460ff1916600117905560040154905133917f2c57dec1db0095a6b800c2698d5bbceef2c180c6ac43429769a719658983f6779161113891868252602082015260400190565b60405180910390a25050565b33600090815260086020526040902054156111ad5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e6520706c616e657420697320616c6c6f7765642070657220726044820152633ab632b960e11b606482015260840161073b565b6000600b600081546111be90612793565b91829055506040805160808101825282815260208082018881528284018790523360608401526000858152600490925292902081518155915192935091600182019061120a908261289d565b506040820151600282019061121f908261289d565b5060609190910151600390910180546001600160a01b0319166001600160a01b03909216919091179055604051339082907fb8efb51f5b4bd967f9a653b1c5be0eac142c1a82ba0c9c11b0b55a0542255f90906112819088908890889061295d565b60405180910390a350505050565b6060818311156112b15760405162461bcd60e51b815260040161073b9061271a565b60006112bd8484612757565b6112c890600161276a565b905060008167ffffffffffffffff8111156112e5576112e56124b6565b60405190808252806020026020018201604052801561131e57816020015b61130b6122bc565b8152602001906001900390816113035790505b5090506000855b8581116108aa57600081815260026020819052604090912001546001600160a01b03808a16911603611406576000818152600260208181526040928390208351610100808201865282548252600183015493820193909352928101546001600160a01b0390811694840194909452600381015490931660608301526004830154608083015260059092015460ff808216151560a08401529281048316151560c0830152620100009004909116151560e082015283518490849081106113ec576113ec61277d565b6020026020010181905250818061140290612793565b9250505b8061141081612793565b915050611325565b6001600160a01b0381811660009081526006602090815260408083205480845260049092529091206003015490911633146114655760405162461bcd60e51b815260040161073b906127ac565b6001600160a01b03821660008181526006602081815260408084208054600584528286208190559383529390935591518181529092917f8858b15a4f1540b0df00082304b78a2330d9ed2951d395bbccb90c257e298ab4910160405180910390a2505050565b3360008181526006602052604090819020839055517f476871eccc7ab517c1c23acfd3954e8ed6fe523bbe0b0ab9a9611d3324ec08ee9061150f9084815260200190565b60405180910390a250565b33600090815260056020526040902054859081146115895760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920617070726f7665642073656c6c6572732063616e206164642070726044820152656f647563747360d01b606482015260840161073b565b6000600a6000815461159a90612793565b91829055506000888152600460205260409020600301549091506001600160a01b03908116908616036116295760405162461bcd60e51b815260206004820152603160248201527f52756c6572732063616e6e6f74206372656174652070726f6475637473206f6e604482015270081d1a195a5c881bdddb881c1b185b995d607a1b606482015260840161073b565b6040805160e08101825289815260208082018490528183018a90526001600160a01b03881660608301526080820187905260a08201869052600060c0830181905284815260039091529190912081518190611684908261289d565b50602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a0820151816005015560c08201518160060155905050846001600160a01b031687827fcf0ba578d8fa98165d2b7dee4fc33f41671e1c181f06f9e05270d9a563a1812e898c898960405161172894939291906129a0565b60405180910390a45050505050505050565b600360205260009081526040902080548190611755906126e0565b80601f0160208091040260200160405190810160405280929190818152602001828054611781906126e0565b80156117ce5780601f106117a3576101008083540402835291602001916117ce565b820191906000526020600020905b8154815290600101906020018083116117b157829003601f168201915b50505060018401546002850154600386015460048701546005880154600690980154969793969295506001600160a01b039091169350919087565b60008181526002602081815260408084208151610100808201845282548252600180840154838701819052848801546001600160a01b0390811685880152600380870154909116606086015260048087015460808088019190915260059097015460ff808216151560a08901529581048616151560c0880152620100009004909416151560e0860152818a52875285892090970154808952918652848820855194850190955284548452840180548998939796929593949392840191906118cf906126e0565b80601f01602080910402602001604051908101604052809291908181526020018280546118fb906126e0565b80156119485780601f1061191d57610100808354040283529160200191611948565b820191906000526020600020905b81548152906001019060200180831161192b57829003601f168201915b50505050508152602001600282018054611961906126e0565b80601f016020809104026020016040519081016040528092919081815260200182805461198d906126e0565b80156119da5780601f106119af576101008083540402835291602001916119da565b820191906000526020600020905b8154815290600101906020018083116119bd57829003601f168201915b5050509183525050600391909101546001600160a01b039081166020909201919091526060820151919250163314611a245760405162461bcd60e51b815260040161073b906127ac565b60008681526007602052604090205460ff16611a8e5760405162461bcd60e51b8152602060048201526024808201527f41707065616c206d75737420626520726169736564206265666f72652072656c6044820152636561736560e01b606482015260840161073b565b60008681526002602052604090206005015460ff1615611ac05760405162461bcd60e51b815260040161073b906127f5565b600154600087815260026020526040908190206003810154600491820154925163a9059cbb60e01b81526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af1158015611b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b53919061282c565b506000868152600260205260409081902060058101805460ff1916600117905560040154905133917f2c57dec1db0095a6b800c2698d5bbceef2c180c6ac43429769a719658983f67791611baf918a8252602082015260400190565b60405180910390a2505050505050565b600082815260036020526040902060040154811115611c395760405162461bcd60e51b815260206004820152603060248201527f496e73756666696369656e7420696e76656e746f7279206f722070726f64756360448201526f1d08191bd95cc81b9bdd08195e1a5cdd60821b606482015260840161073b565b600082815260036020818152604080842060020154808552600490925290922001546001600160a01b03163303611cc25760405162461bcd60e51b815260206004820152602760248201527f52756c6572732063616e6e6f74206275792066726f6d207468656972206f776e604482015266081c1b185b995d60ca1b606482015260840161073b565b600083815260036020526040812060050154611cdf9084906129d9565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5b919061282c565b5060098054906000611d6c83612793565b9091555050600954604080519182526020820183905233917f0f4a9c70987615d71a1085cae3c6fb0c2855f81a5ec62cb7ee3136d5407e357c910160405180910390a260008481526003602052604081206004018054859290611dd0908490612757565b909155505060008481526003602052604081206006018054859290611df690849061276a565b90915550506040805161010080820183526009805480845260208085018a81523386880181815260008d815260038086528a82208101546001600160a01b0390811660608c0190815260808c018e815260a08d0185815260c08e0186815260e08f018781529b875260029a8b9052958f90209d518e55975160018e01559451978c0180549883166001600160a01b0319998a1617905551918b018054929091169190961617909455516004880155905160059096018054925193511515620100000262ff00001994151590960261ff00199715159790971661ffff199093169290921795909517919091169290921790915554915190917f0f4a9c70987615d71a1085cae3c6fb0c2855f81a5ec62cb7ee3136d5407e357c91611f2491908790918252602082015260400190565b60405180910390a250505050565b606081831115611f545760405162461bcd60e51b815260040161073b9061271a565b6000611f608484612757565b611f6b90600161276a565b905060008167ffffffffffffffff811115611f8857611f886124b6565b604051908082528060200260200182016040528015611fc157816020015b611fae6122bc565b815260200190600190039081611fa65790505b5090506000855b858111612096576000818152600260208181526040928390208351610100808201865282548252600183015493820193909352928101546001600160a01b0390811694840194909452600381015490931660608301526004830154608083015260059092015460ff808216151560a08401529281048316151560c0830152620100009004909116151560e0820152835184908490811061206a5761206a61277d565b6020026020010181905250818061208090612793565b925050808061208e90612793565b915050611fc8565b5090925050505b92915050565b600081815260026020819052604090912001546001600160a01b03163314806120e557506000818152600260205260409020600301546001600160a01b031633145b6121425760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206275796572206f722073656c6c65722063616e20726169736520616044820152671b88185c1c19585b60c21b606482015260840161073b565b600081815260076020526040808220805460ff1916600117905551339183917f84fe926178a9a001285f5126878cb13cc2d8c091b23b313f76a0875d230b627c9190a350565b60008181526002602052604090206003015481906001600160a01b031633146122065760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79207468652053656c6c65722063616e20706572666f726d20746869736044820152691037b832b930ba34b7b760b11b606482015260840161073b565b600082815260026020526040902060050154610100900460ff161561225f5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481cda1a5c1c1959608a1b604482015260640161073b565b6000828152600260205260409081902060058101805461ff00191661010017905560040154905133917f47357acf7cd02d7a69ba4d681fead1ba8015768d36e56cdd2340d1cc0a148d649161113891868252602082015260400190565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b80356001600160a01b038116811461231757600080fd5b919050565b60006020828403121561232e57600080fd5b61233782612300565b9392505050565b6000815180845260005b8181101561236457602081850181015186830182015201612348565b506000602082860101526020601f19601f83011685010191505092915050565b84815260806020820152600061239d608083018661233e565b82810360408401526123af818661233e565b91505060018060a01b038316606083015295945050505050565b6000806000606084860312156123de57600080fd5b6123e784612300565b95602085013595506040909401359392505050565b602080825282518282018190526000919060409081850190868401855b82811015612490578151805185528681015187860152858101516001600160a01b0390811687870152606080830151909116908601526080808201519086015260a08082015115159086015260c08082015115159086015260e0908101511515908501526101009093019290850190600101612419565b5091979650505050505050565b6000602082840312156124af57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126124dd57600080fd5b813567ffffffffffffffff808211156124f8576124f86124b6565b604051601f8301601f19908116603f01168101908282118183101715612520576125206124b6565b8160405283815286602085880101111561253957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561256e57600080fd5b833567ffffffffffffffff8082111561258657600080fd5b612592878388016124cc565b945060208601359150808211156125a857600080fd5b6125b4878388016124cc565b935060408601359150808211156125ca57600080fd5b506125d7868287016124cc565b9150509250925092565b60008060008060008060c087890312156125fa57600080fd5b863567ffffffffffffffff8082111561261257600080fd5b61261e8a838b016124cc565b975060208901359650604089013591508082111561263b57600080fd5b5061264889828a016124cc565b94505061265760608801612300565b92506080870135915060a087013590509295509295509295565b60e08152600061268460e083018a61233e565b60208301989098525060408101959095526001600160a01b03939093166060850152608084019190915260a083015260c090910152919050565b600080604083850312156126d157600080fd5b50508035926020909101359150565b600181811c908216806126f457607f821691505b60208210810361271457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c496e76616c69642072616e676560981b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561209d5761209d612741565b8082018082111561209d5761209d612741565b634e487b7160e01b600052603260045260246000fd5b6000600182016127a5576127a5612741565b5060010190565b60208082526029908201527f4f6e6c79207468652052756c65722063616e20706572666f726d20746869732060408201526837b832b930ba34b7b760b91b606082015260800190565b6020808252601a908201527f46756e64732061726520616c72656164792072656c6561736564000000000000604082015260600190565b60006020828403121561283e57600080fd5b8151801515811461233757600080fd5b601f82111561289857600081815260208120601f850160051c810160208610156128755750805b601f850160051c820191505b8181101561289457828155600101612881565b5050505b505050565b815167ffffffffffffffff8111156128b7576128b76124b6565b6128cb816128c584546126e0565b8461284e565b602080601f83116001811461290057600084156128e85750858301515b600019600386901b1c1916600185901b178555612894565b600085815260208120601f198616915b8281101561292f57888601518255948401946001909101908401612910565b508582101561294d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000612970606083018661233e565b8281036020840152612982818661233e565b90508281036040840152612996818561233e565b9695505050505050565b6080815260006129b3608083018761233e565b82810360208401526129c5818761233e565b604084019590955250506060015292915050565b808202811582820484141761209d5761209d61274156fea264697066735822122078a6fcda90fac10a9602967f3908732e3195e8b58e47d0d20596aa46ef8875a064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 830,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 832,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "MOCKUSDT_ADDRESS",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 837,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "purchases",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Purchase)896_storage)"
      },
      {
        "astId": 842,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "products",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Product)911_storage)"
      },
      {
        "astId": 847,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "planets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Planet)879_storage)"
      },
      {
        "astId": 851,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "approvedSellers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 855,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "approvalRequests",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 859,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "appeals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 864,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "rulerPlanets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Planet)879_storage)"
      },
      {
        "astId": 866,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "numPurchases",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 868,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "numProducts",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 870,
        "contract": "contracts/Duniverse.sol:Duniverse",
        "label": "numPlanets",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Planet)879_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Duniverse.Planet)",
        "numberOfBytes": "32",
        "value": "t_struct(Planet)879_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Planet)879_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Duniverse.Planet)",
        "numberOfBytes": "32",
        "value": "t_struct(Planet)879_storage"
      },
      "t_mapping(t_uint256,t_struct(Product)911_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Duniverse.Product)",
        "numberOfBytes": "32",
        "value": "t_struct(Product)911_storage"
      },
      "t_mapping(t_uint256,t_struct(Purchase)896_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Duniverse.Purchase)",
        "numberOfBytes": "32",
        "value": "t_struct(Purchase)896_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Planet)879_storage": {
        "encoding": "inplace",
        "label": "struct Duniverse.Planet",
        "members": [
          {
            "astId": 872,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "planetId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 874,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "planetName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 876,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "planetDescription",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 878,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "ruler",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Product)911_storage": {
        "encoding": "inplace",
        "label": "struct Duniverse.Product",
        "members": [
          {
            "astId": 898,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "productName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 900,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "productId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 902,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "planetId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 904,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "seller",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 906,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "quantity",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 908,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 910,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "sales",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Purchase)896_storage": {
        "encoding": "inplace",
        "label": "struct Duniverse.Purchase",
        "members": [
          {
            "astId": 881,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "purchaseId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 883,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "productId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 885,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "buyer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 887,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "seller",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 889,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "amount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 891,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "isReleased",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 893,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "isDelivered",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 895,
            "contract": "contracts/Duniverse.sol:Duniverse",
            "label": "isRefunded",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}